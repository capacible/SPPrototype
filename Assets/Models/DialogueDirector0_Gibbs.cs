// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;
using System.Collections.Generic;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 5:57 PM on Wednesday, August 9, 2023.
	/// </remarks>
	public partial class DialogueDirector0_Gibbs : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Message from marginal of 'AllEvents'</summary>
		public DistributionRefArray<Discrete,int> AllEvents_marginal_B;
		public Discrete AllEvents_marginal_B_reduced;
		/// <summary>Message to marginal of 'AllEvents'</summary>
		public GibbsMarginal<DistributionRefArray<Discrete,int>,int[]> AllEvents_marginal_F;
		/// <summary>Field backing the AllRels property</summary>
		private int[] AllRels_field;
		/// <summary>Field backing the AllTraits property</summary>
		private int[] AllTraits_field;
		/// <summary>True if Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases has executed. Set this to false to force re-execution of Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases</summary>
		public bool Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone;
		/// <summary>True if Changed_DialogueCPTPrior has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior</summary>
		public bool Changed_DialogueCPTPrior_isDone;
		/// <summary>True if Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases</summary>
		public bool Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isDone;
		/// <summary>True if Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases has performed initialisation. Set this to false to force re-execution of Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases</summary>
		public bool Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised;
		/// <summary>True if Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases has executed. Set this to false to force re-execution of Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases</summary>
		public bool Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isDone;
		/// <summary>True if Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases has performed initialisation. Set this to false to force re-execution of Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases</summary>
		public bool Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors</summary>
		public bool Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors</summary>
		public bool Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised;
		/// <summary>True if Changed_NumOfCases has executed. Set this to false to force re-execution of Changed_NumOfCases</summary>
		public bool Changed_NumOfCases_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message from marginal of 'DialogueChild'</summary>
		public DistributionRefArray<Discrete,int> DialogueChild_marginal_B;
		public Discrete DialogueChild_marginal_B_reduced;
		/// <summary>Message to marginal of 'DialogueChild'</summary>
		public GibbsMarginal<DistributionRefArray<Discrete,int>,int[]> DialogueChild_marginal_F;
		/// <summary>Message to marginal of 'DialogueChild_NCases__Events'</summary>
		public GibbsMarginal<Discrete,int>[][] DialogueChild_NCases__Events_marginal_F;
		/// <summary>Message from marginal of 'DialogueCPT'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_marginal_B;
		/// <summary>Message to marginal of 'DialogueCPT'</summary>
		public GibbsMarginal<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,Vector[][][]> DialogueCPT_marginal_F;
		/// <summary>Messages from uses of 'DialogueCPT'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>[] DialogueCPT_uses_B;
		/// <summary>Field backing the DialogueCPTPrior property</summary>
		private Dirichlet[][][] DialogueCPTPrior_field;
		/// <summary>Field backing the EventsPriors property</summary>
		private Dirichlet EventsPriors_field;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the NumOfCases property</summary>
		private int NumOfCases_field;
		/// <summary>Message to marginal of 'PossibleEvents'</summary>
		public GibbsMarginal<Dirichlet,Vector> PossibleEvents_marginal_F;
		/// <summary>Messages from uses of 'PossibleEvents'</summary>
		public Dirichlet[] PossibleEvents_uses_B;
		/// <summary>Field backing the RelStatusPriors property</summary>
		private Dirichlet RelStatusPriors_field;
		/// <summary>Field backing the TraitsPriors property</summary>
		private Dirichlet TraitsPriors_field;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'AllRels'</summary>
		public int[] AllRels
		{
			get {
				return this.AllRels_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumOfCases)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumOfCases)+" was expected for variable \'AllRels\'");
				}
				this.AllRels_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised = false;
				this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised = false;
				this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'AllTraits'</summary>
		public int[] AllTraits
		{
			get {
				return this.AllTraits_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumOfCases)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumOfCases)+" was expected for variable \'AllTraits\'");
				}
				this.AllTraits_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised = false;
				this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised = false;
				this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DialogueCPTPrior'</summary>
		public Dirichlet[][][] DialogueCPTPrior
		{
			get {
				return this.DialogueCPTPrior_field;
			}
			set {
				if ((value!=null)&&(value.Length!=215)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+215)+" was expected for variable \'DialogueCPTPrior\'");
				}
				this.DialogueCPTPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised = false;
				this.Changed_DialogueCPTPrior_isDone = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isDone = false;
				this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised = false;
				this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPriors'</summary>
		public Dirichlet EventsPriors
		{
			get {
				return this.EventsPriors_field;
			}
			set {
				this.EventsPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised = false;
				this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isDone = false;
				this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'NumOfCases'</summary>
		public int NumOfCases
		{
			get {
				return this.NumOfCases_field;
			}
			set {
				if (this.NumOfCases_field!=value) {
					this.NumOfCases_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_NumOfCases_isDone = false;
					this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isDone = false;
					this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised = false;
					this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised = false;
					this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'RelStatusPriors'</summary>
		public Dirichlet RelStatusPriors
		{
			get {
				return this.RelStatusPriors_field;
			}
			set {
				this.RelStatusPriors_field = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'TraitsPriors'</summary>
		public Dirichlet TraitsPriors
		{
			get {
				return this.TraitsPriors_field;
			}
			set {
				this.TraitsPriors_field = value;
				this.numberOfIterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of AllRels and AllTraits and DialogueCPTPrior and EventsPriors and numberOfIterations and NumOfCases</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases(int numberOfIterations)
		{
			if (this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone) {
				return ;
			}
			Vector[] PossibleEvents_uses_F;
			// Create array for 'PossibleEvents_uses' Forwards messages.
			PossibleEvents_uses_F = new Vector[1];
			Discrete AllEvents_F_reduced;
			AllEvents_F_reduced = default(Discrete);
			if (this.NumOfCases>0) {
				AllEvents_F_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
			}
			DistributionRefArray<Discrete,int> AllEvents_F;
			// Create array for 'AllEvents' Forwards messages.
			AllEvents_F = new DistributionRefArray<Discrete,int>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				AllEvents_F[NCases] = AllEvents_F_reduced;
			}
			// Create array for replicates of 'AllEvents_NCases__selector_uses_B'
			Discrete[][] AllEvents_NCases__selector_uses_B = new Discrete[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for 'AllEvents_NCases__selector_uses' Backwards messages.
				AllEvents_NCases__selector_uses_B[NCases] = new Discrete[2];
				AllEvents_NCases__selector_uses_B[NCases][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
				AllEvents_NCases__selector_uses_B[NCases][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
			}
			// Create array for replicates of 'AllEvents_NCases__selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] AllEvents_NCases__selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases] = new DistributionStructArray<Bernoulli,bool>[6];
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][0] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][0][Events] = Bernoulli.Uniform();
				}
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][1] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][1][Events] = Bernoulli.Uniform();
				}
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][4] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][4][Events] = Bernoulli.Uniform();
				}
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][2] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][2][Events] = Bernoulli.Uniform();
				}
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][3] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][3][Events] = Bernoulli.Uniform();
				}
				// Create array for 'AllEvents_NCases__selector_cases_uses' Backwards messages.
				AllEvents_NCases__selector_cases_uses_B[NCases][5] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_uses_B[NCases][5][Events] = Bernoulli.Uniform();
				}
			}
			Discrete[][] DialogueChild_NCases__Events_uses_B_reduced = new Discrete[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				DialogueChild_NCases__Events_uses_B_reduced[NCases] = default(Discrete[]);
				// Create array for 'DialogueChild_NCases__Events_uses' Backwards messages.
				DialogueChild_NCases__Events_uses_B_reduced[NCases] = new Discrete[1];
				DialogueChild_NCases__Events_uses_B_reduced[NCases][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(670));
			}
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_F;
			// Create array for 'DialogueCPT' Forwards messages.
			DialogueCPT_F = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(215);
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT' Forwards messages.
				DialogueCPT_F[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(14);
				for(int Traits = 0; Traits<14; Traits++) {
					// Create array for 'DialogueCPT' Forwards messages.
					DialogueCPT_F[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(3);
					for(int Rel = 0; Rel<3; Rel++) {
						DialogueCPT_F[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
						// Message to 'DialogueCPT' from Random factor
						DialogueCPT_F[Events][Traits][Rel] = ArrayHelper.SetTo<Dirichlet>(DialogueCPT_F[Events][Traits][Rel], this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			int[][] AllEvents_uses_F;
			// Create array for 'AllEvents_uses' Forwards messages.
			AllEvents_uses_F = new int[1][];
			// Create array for 'AllEvents_uses' Forwards messages.
			AllEvents_uses_F[0] = new int[this.NumOfCases];
			// Create array for replicates of 'DialogueChild_NCases__Events_B'
			int[][] DialogueChild_NCases__Events_B = new int[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueChild_NCases__Events_B'
				DialogueChild_NCases__Events_B[NCases] = new int[215];
				for(int Events = 0; Events<215; Events++) {
					DialogueChild_NCases__Events_B[NCases][Events] = default(int);
				}
			}
			// Create array for replicates of 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B'
			Dirichlet[][][] DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B = new Dirichlet[this.NumOfCases][][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B'
				DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases] = new Dirichlet[215][];
				for(int Events = 0; Events<215; Events++) {
					// Create array for 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses' Backwards messages.
					DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases][Events] = new Dirichlet[1];
					DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases][Events][0] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][this.AllTraits[NCases]][this.AllRels[NCases]]);
				}
			}
			// Create array for replicates of 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B'
			Dirichlet[][] DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B = new Dirichlet[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B'
				DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B[NCases] = new Dirichlet[215];
				for(int Events = 0; Events<215; Events++) {
					DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B[NCases][Events] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][this.AllTraits[NCases]][this.AllRels[NCases]]);
				}
			}
			// Create array for replicates of 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B'
			DistributionRefArray<Dirichlet,Vector>[][] DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B = new DistributionRefArray<Dirichlet,Vector>[215][];
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses' Backwards messages.
				DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events] = new DistributionRefArray<Dirichlet,Vector>[1];
				// Create array for 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses' Backwards messages.
				DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events][0] = new DistributionRefArray<Dirichlet,Vector>(this.NumOfCases);
			}
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				for(int Events = 0; Events<215; Events++) {
					DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events][0][NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][this.AllTraits[NCases]][this.AllRels[NCases]]);
				}
			}
			// Create array for replicates of 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B'
			DistributionRefArray<Dirichlet,Vector>[] DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B = new DistributionRefArray<Dirichlet,Vector>[215];
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases_' Backwards messages.
				DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B[Events] = new DistributionRefArray<Dirichlet,Vector>(this.NumOfCases);
			}
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				for(int Events = 0; Events<215; Events++) {
					DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B[Events][NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][this.AllTraits[NCases]][this.AllRels[NCases]]);
				}
			}
			Vector[][][][] DialogueCPT_uses_F;
			// Create array for 'DialogueCPT_uses' Forwards messages.
			DialogueCPT_uses_F = new Vector[1][][][];
			// Create array for 'DialogueCPT_uses' Forwards messages.
			DialogueCPT_uses_F[0] = new Vector[215][][];
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_uses' Forwards messages.
				DialogueCPT_uses_F[0][Events] = new Vector[14][];
				for(int Traits = 0; Traits<14; Traits++) {
					// Create array for 'DialogueCPT_uses' Forwards messages.
					DialogueCPT_uses_F[0][Events][Traits] = new Vector[3];
				}
			}
			// Create array for replicates of 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F'
			Vector[][] DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F = new Vector[215][];
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases_' Forwards messages.
				DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F[Events] = new Vector[this.NumOfCases];
			}
			// Create array for replicates of 'DialogueChild_NCases__Events_F'
			Discrete[][] DialogueChild_NCases__Events_F = new Discrete[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueChild_NCases__Events_F'
				DialogueChild_NCases__Events_F[NCases] = new Discrete[215];
				for(int Events = 0; Events<215; Events++) {
					DialogueChild_NCases__Events_F[NCases][Events] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(670));
				}
			}
			DistributionRefArray<Discrete,int> DialogueChild_B;
			// Create array for 'DialogueChild' Backwards messages.
			DialogueChild_B = new DistributionRefArray<Discrete,int>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				DialogueChild_B[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(670));
			}
			// Create array for replicates of 'DialogueChild_NCases__F'
			int[][] DialogueChild_NCases__F = new int[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for 'DialogueChild_NCases_' Forwards messages.
				DialogueChild_NCases__F[NCases] = new int[215];
			}
			// Create array for replicates of 'DialogueChild_NCases__Events_uses_F'
			int[][][] DialogueChild_NCases__Events_uses_F = new int[this.NumOfCases][][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueChild_NCases__Events_uses_F'
				DialogueChild_NCases__Events_uses_F[NCases] = new int[215][];
				for(int Events = 0; Events<215; Events++) {
					// Create array for 'DialogueChild_NCases__Events_uses' Forwards messages.
					DialogueChild_NCases__Events_uses_F[NCases][Events] = new int[1];
				}
			}
			// Create array for replicates of 'AllEvents_NCases__selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] AllEvents_NCases__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.NumOfCases];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for 'AllEvents_NCases__selector_cases' Backwards messages.
				AllEvents_NCases__selector_cases_B[NCases] = new DistributionStructArray<Bernoulli,bool>(215);
				for(int Events = 0; Events<215; Events++) {
					AllEvents_NCases__selector_cases_B[NCases][Events] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'AllEvents_NCases__selector_B'
			Discrete[] AllEvents_NCases__selector_B = new Discrete[this.NumOfCases];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				AllEvents_NCases__selector_B[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
			}
			DistributionRefArray<Discrete,int>[] AllEvents_uses_B;
			// Create array for 'AllEvents_uses' Backwards messages.
			AllEvents_uses_B = new DistributionRefArray<Discrete,int>[1];
			// Create array for 'AllEvents_uses' Backwards messages.
			AllEvents_uses_B[0] = new DistributionRefArray<Discrete,int>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				AllEvents_uses_B[0][NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
			}
			int[] AllEvents_B;
			// Create array for 'AllEvents' Backwards messages.
			AllEvents_B = new int[this.NumOfCases];
			DistributionRefArray<Dirichlet,Vector>[] PossibleEvents_rep_uses_B;
			// Create array for 'PossibleEvents_rep_uses' Backwards messages.
			PossibleEvents_rep_uses_B = new DistributionRefArray<Dirichlet,Vector>[1];
			// Create array for 'PossibleEvents_rep_uses' Backwards messages.
			PossibleEvents_rep_uses_B[0] = new DistributionRefArray<Dirichlet,Vector>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				PossibleEvents_rep_uses_B[0][NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			}
			DistributionRefArray<Dirichlet,Vector> PossibleEvents_rep_B;
			// Create array for 'PossibleEvents_rep' Backwards messages.
			PossibleEvents_rep_B = new DistributionRefArray<Dirichlet,Vector>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				PossibleEvents_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			}
			int[] DialogueChild_F;
			// Create array for 'DialogueChild' Forwards messages.
			DialogueChild_F = new int[this.NumOfCases];
			// Create array for replicates of 'AllEvents_NCases__selector_cases_F'
			bool[][] AllEvents_NCases__selector_cases_F = new bool[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for 'AllEvents_NCases__selector_cases' Forwards messages.
				AllEvents_NCases__selector_cases_F[NCases] = new bool[215];
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'PossibleEvents_marginal' from UsesEqualDef factor
				this.PossibleEvents_marginal_F = UsesEqualDefGibbsOp<Vector>.MarginalGibbs<Dirichlet>(this.PossibleEvents_uses_B, this.EventsPriors, this.PossibleEvents_marginal_F);
				// Message to 'PossibleEvents_uses' from UsesEqualDef factor
				PossibleEvents_uses_F[0] = UsesEqualDefGibbsOp<Vector>.UsesGibbs<Dirichlet>(this.PossibleEvents_marginal_F, 0, PossibleEvents_uses_F[0]);
				if (this.NumOfCases>0) {
					// Message to 'AllEvents' from Discrete factor
					AllEvents_F_reduced = DiscreteFromDirichletOp.SampleAverageConditional(PossibleEvents_uses_F[0], AllEvents_F_reduced);
				}
				for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
					AllEvents_F[NCases] = AllEvents_F_reduced;
				}
				// Message to 'DialogueCPT_marginal' from UsesEqualDef factor
				this.DialogueCPT_marginal_F = UsesEqualDefGibbsOp<Vector[][][]>.MarginalGibbs<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>>(this.DialogueCPT_uses_B, DialogueCPT_F, this.DialogueCPT_marginal_F);
				// Message to 'DialogueCPT_uses' from UsesEqualDef factor
				DialogueCPT_uses_F[0] = UsesEqualDefGibbsOp<Vector[][][]>.UsesGibbs<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>>(this.DialogueCPT_marginal_F, 0, DialogueCPT_uses_F[0]);
				for(int Events = 0; Events<215; Events++) {
					// Message to 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases_' from GetItemsFromJagged factor
					DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F[Events] = Collection.GetItemsFromJagged<Vector>(DialogueCPT_uses_F[0][Events], this.AllTraits, this.AllRels);
				}
				for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
					for(int Events = 0; Events<215; Events++) {
						// Message to 'DialogueChild_NCases__Events' from Discrete factor
						DialogueChild_NCases__Events_F[NCases][Events] = DiscreteFromDirichletOp.SampleAverageConditional(DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F[Events][NCases], DialogueChild_NCases__Events_F[NCases][Events]);
						// Message to 'DialogueChild_NCases__Events_marginal' from UsesEqualDef factor
						this.DialogueChild_NCases__Events_marginal_F[NCases][Events] = UsesEqualDefGibbsOp<int>.MarginalGibbs<Discrete>(DialogueChild_NCases__Events_uses_B_reduced[NCases], DialogueChild_NCases__Events_F[NCases][Events], this.DialogueChild_NCases__Events_marginal_F[NCases][Events]);
						// Message to 'AllEvents_NCases__selector_cases_uses' from UsesEqualDef factor
						AllEvents_NCases__selector_cases_uses_B[NCases][2][Events] = Bernoulli.FromLogOdds(UsesEqualDefGibbsOp<int>.GibbsEvidence<Discrete>(DialogueChild_NCases__Events_uses_B_reduced[NCases], DialogueChild_NCases__Events_F[NCases][Events], this.DialogueChild_NCases__Events_marginal_F[NCases][Events]));
						// Message to 'DialogueChild_NCases__Events' from UsesEqualDef factor
						DialogueChild_NCases__Events_B[NCases][Events] = UsesEqualDefGibbsOp<int>.DefGibbs<Discrete>(this.DialogueChild_NCases__Events_marginal_F[NCases][Events], DialogueChild_NCases__Events_B[NCases][Events]);
						// Message to 'DialogueChild_NCases__Events_uses' from UsesEqualDef factor
						DialogueChild_NCases__Events_uses_F[NCases][Events][0] = UsesEqualDefGibbsOp<int>.UsesGibbs<Discrete>(this.DialogueChild_NCases__Events_marginal_F[NCases][Events], 0, DialogueChild_NCases__Events_uses_F[NCases][Events][0]);
						// Message to 'DialogueChild_NCases_' from Copy factor
						DialogueChild_NCases__F[NCases][Events] = Clone.Copy<int>(DialogueChild_NCases__Events_uses_F[NCases][Events][0]);
						// Message to 'AllEvents_NCases__selector_cases_uses' from Discrete factor
						AllEvents_NCases__selector_cases_uses_B[NCases][3][Events] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.LogEvidenceRatio(DialogueChild_NCases__Events_B[NCases][Events], DialogueCPT_itemAllTraits_NCases_AllRels_NCases__F[Events][NCases]));
					}
					for(int Events = 0; Events<215; Events++) {
						// Message to 'AllEvents_NCases__selector_cases_uses' from Exit factor
						AllEvents_NCases__selector_cases_uses_B[NCases][5][Events] = GateExitOp<int>.CasesAverageConditional<Discrete>(DialogueChild_B[NCases], DialogueChild_NCases__F[NCases], Events);
					}
					// Message to 'AllEvents_NCases__selector_cases' from ReplicateWithMarginal factor
					AllEvents_NCases__selector_cases_B[NCases] = ReplicateGibbsOp<bool[]>.DefGibbs<DistributionStructArray<Bernoulli,bool>>(AllEvents_NCases__selector_cases_uses_B[NCases], AllEvents_NCases__selector_cases_B[NCases]);
					// Message to 'AllEvents_NCases__selector_uses' from CasesInt factor
					AllEvents_NCases__selector_uses_B[NCases][0] = IntCasesOp.IAverageConditional(AllEvents_NCases__selector_cases_B[NCases], AllEvents_NCases__selector_uses_B[NCases][0]);
					// Message to 'AllEvents_NCases__selector' from ReplicateWithMarginal factor
					AllEvents_NCases__selector_B[NCases] = ReplicateGibbsOp<int>.DefGibbs<Discrete>(AllEvents_NCases__selector_uses_B[NCases], AllEvents_NCases__selector_B[NCases]);
					// Message to 'AllEvents_uses' from Copy factor
					AllEvents_uses_B[0][NCases] = ArrayHelper.SetTo<Discrete>(AllEvents_uses_B[0][NCases], AllEvents_NCases__selector_B[NCases]);
				}
				// Message to 'AllEvents_marginal' from UsesEqualDef factor
				this.AllEvents_marginal_F = UsesEqualDefGibbsOp<int[]>.MarginalGibbs<DistributionRefArray<Discrete,int>>(AllEvents_uses_B, AllEvents_F, this.AllEvents_marginal_F);
				// Message to 'AllEvents' from UsesEqualDef factor
				AllEvents_B = UsesEqualDefGibbsOp<int[]>.DefGibbs<DistributionRefArray<Discrete,int>>(this.AllEvents_marginal_F, AllEvents_B);
				for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
					// Message to 'PossibleEvents_rep_uses' from Discrete factor
					PossibleEvents_rep_uses_B[0][NCases] = DiscreteFromDirichletOp.ProbsAverageConditional(AllEvents_B[NCases], PossibleEvents_rep_uses_B[0][NCases]);
				}
				// Message to 'PossibleEvents_rep' from ReplicateWithMarginal factor
				PossibleEvents_rep_B = ReplicateGibbsOp<Vector[]>.DefGibbs<DistributionRefArray<Dirichlet,Vector>>(PossibleEvents_rep_uses_B, PossibleEvents_rep_B);
				// Message to 'PossibleEvents_uses' from Replicate factor
				this.PossibleEvents_uses_B[0] = ReplicateOp_NoDivide.DefAverageConditional<Dirichlet>(PossibleEvents_rep_B, this.PossibleEvents_uses_B[0]);
				// Message to 'AllEvents_uses' from UsesEqualDef factor
				AllEvents_uses_F[0] = UsesEqualDefGibbsOp<int[]>.UsesGibbs<DistributionRefArray<Discrete,int>>(this.AllEvents_marginal_F, 0, AllEvents_uses_F[0]);
				for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
					for(int Events = 0; Events<215; Events++) {
						// Message to 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses' from Discrete factor
						DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases][Events][0] = DiscreteFromDirichletOp.ProbsAverageConditional(DialogueChild_NCases__Events_B[NCases][Events], DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases][Events][0]);
						// Message to 'DialogueCPT_Events_AllTraits_NCases__AllRels_NCases__' from ReplicateWithMarginal factor
						DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B[NCases][Events] = ReplicateGibbsOp<Vector>.DefGibbs<Dirichlet>(DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___uses_B[NCases][Events], DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B[NCases][Events]);
						// Message to 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses' from EnterOne factor
						DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events][0][NCases] = GateEnterOneOp<Vector>.ValueAverageConditional<Dirichlet>(DialogueCPT_Events_AllTraits_NCases__AllRels_NCases___B[NCases][Events], AllEvents_uses_F[0][NCases], Events, DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events][0][NCases]);
					}
				}
				for(int Events = 0; Events<215; Events++) {
					// Message to 'DialogueCPT_itemAllTraits_NCases_AllRels_NCases_' from ReplicateWithMarginal factor
					DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B[Events] = ReplicateGibbsOp<Vector[]>.DefGibbs<DistributionRefArray<Dirichlet,Vector>>(DialogueCPT_itemAllTraits_NCases_AllRels_NCases__uses_B[Events], DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B[Events]);
					// Message to 'DialogueCPT_uses' from GetItemsFromJagged factor
					this.DialogueCPT_uses_B[0][Events] = GetItemsFromJaggedOp<Vector>.ArrayAverageConditional<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,DistributionRefArray<Dirichlet,Vector>,Dirichlet>(DialogueCPT_itemAllTraits_NCases_AllRels_NCases__B[Events], this.AllTraits, this.AllRels, this.DialogueCPT_uses_B[0][Events]);
				}
				for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
					// Message to 'AllEvents_NCases__selector_cases' from CasesInt factor
					AllEvents_NCases__selector_cases_F[NCases] = Gate.CasesInt(AllEvents_uses_F[0][NCases], 215);
					// Message to 'DialogueChild' from Exit factor
					DialogueChild_F[NCases] = Gate.Exit<int>(AllEvents_NCases__selector_cases_F[NCases], DialogueChild_NCases__F[NCases]);
				}
				// Message to 'DialogueChild_marginal' from ReplicateWithMarginal factor
				this.DialogueChild_marginal_F = ReplicateGibbsOp<int[]>.MarginalGibbs<DistributionRefArray<Discrete,int>,int[]>(DialogueChild_F, this.DialogueChild_marginal_F);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior</summary>
		private void Changed_DialogueCPTPrior()
		{
			if (this.Changed_DialogueCPTPrior_isDone) {
				return ;
			}
			for(int Events = 0; Events<215; Events++) {
				for(int Traits = 0; Traits<14; Traits++) {
					for(int Rel = 0; Rel<3; Rel++) {
						this.DialogueCPT_marginal_B[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			this.Changed_DialogueCPTPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior and numberOfIterationsDecreased and must reset on changes to AllRels and AllTraits and EventsPriors and NumOfCases</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases(bool initialise)
		{
			if (this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isDone&&((!initialise)||this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised)) {
				return ;
			}
			for(int Events = 0; Events<215; Events++) {
				for(int Traits = 0; Traits<14; Traits++) {
					for(int Rel = 0; Rel<3; Rel++) {
						this.DialogueCPT_uses_B[0][Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			// Create array for 'DialogueCPT_marginal' Forwards messages.
			this.DialogueCPT_marginal_F = new GibbsMarginal<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,Vector[][][]>(this.DialogueCPT_marginal_B, 100, 5, true, true, false);
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isDone = true;
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPriors and numberOfIterationsDecreased and must reset on changes to AllRels and AllTraits and DialogueCPTPrior and NumOfCases</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases(bool initialise)
		{
			if (this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isDone&&((!initialise)||this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised)) {
				return ;
			}
			this.PossibleEvents_marginal_F = new GibbsMarginal<Dirichlet,Vector>(this.EventsPriors, 100, 5, false, false, false);
			this.PossibleEvents_uses_B[0] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isDone = true;
			this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and NumOfCases and must reset on changes to AllRels and AllTraits and DialogueCPTPrior and EventsPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				for(int Events = 0; Events<215; Events++) {
					this.DialogueChild_NCases__Events_marginal_F[NCases][Events] = new GibbsMarginal<Discrete,int>(Discrete.Uniform(670), 100, 5, false, false, false);
				}
			}
			// Create array for 'AllEvents_marginal' Forwards messages.
			this.AllEvents_marginal_F = new GibbsMarginal<DistributionRefArray<Discrete,int>,int[]>(this.AllEvents_marginal_B, 100, 5, false, false, false);
			// Create array for 'DialogueChild_marginal' Forwards messages.
			this.DialogueChild_marginal_F = new GibbsMarginal<DistributionRefArray<Discrete,int>,int[]>(this.DialogueChild_marginal_B, 100, 5, true, true, false);
			this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isDone = true;
			this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of NumOfCases</summary>
		private void Changed_NumOfCases()
		{
			if (this.Changed_NumOfCases_isDone) {
				return ;
			}
			// Create array for replicates of 'DialogueChild_NCases__Events_marginal_F'
			this.DialogueChild_NCases__Events_marginal_F = new GibbsMarginal<Discrete,int>[this.NumOfCases][];
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				// Create array for replicates of 'DialogueChild_NCases__Events_marginal_F'
				this.DialogueChild_NCases__Events_marginal_F[NCases] = new GibbsMarginal<Discrete,int>[215];
			}
			this.AllEvents_marginal_B_reduced = default(Discrete);
			if (this.NumOfCases>0) {
				this.AllEvents_marginal_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(215));
			}
			// Create array for 'AllEvents_marginal' Backwards messages.
			this.AllEvents_marginal_B = new DistributionRefArray<Discrete,int>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				this.AllEvents_marginal_B[NCases] = this.AllEvents_marginal_B_reduced;
			}
			this.DialogueChild_marginal_B_reduced = default(Discrete);
			if (this.NumOfCases>0) {
				this.DialogueChild_marginal_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(670));
			}
			// Create array for 'DialogueChild_marginal' Backwards messages.
			this.DialogueChild_marginal_B = new DistributionRefArray<Discrete,int>(this.NumOfCases);
			for(int NCases = 0; NCases<this.NumOfCases; NCases++) {
				this.DialogueChild_marginal_B[NCases] = this.DialogueChild_marginal_B_reduced;
			}
			this.Changed_NumOfCases_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'PossibleEvents_uses' Backwards messages.
			this.PossibleEvents_uses_B = new Dirichlet[1];
			// Create array for 'DialogueCPT_uses' Backwards messages.
			this.DialogueCPT_uses_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>[1];
			// Create array for 'DialogueCPT_uses' Backwards messages.
			this.DialogueCPT_uses_B[0] = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(215);
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_uses' Backwards messages.
				this.DialogueCPT_uses_B[0][Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(14);
				for(int Traits = 0; Traits<14; Traits++) {
					// Create array for 'DialogueCPT_uses' Backwards messages.
					this.DialogueCPT_uses_B[0][Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(3);
				}
			}
			// Create array for 'DialogueCPT_marginal' Backwards messages.
			this.DialogueCPT_marginal_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(215);
			for(int Events = 0; Events<215; Events++) {
				// Create array for 'DialogueCPT_marginal' Backwards messages.
				this.DialogueCPT_marginal_B[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(14);
				for(int Traits = 0; Traits<14; Traits++) {
					// Create array for 'DialogueCPT_marginal' Backwards messages.
					this.DialogueCPT_marginal_B[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(3);
				}
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueChild' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> DialogueChildMarginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<Discrete,int>>(this.DialogueChild_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'DialogueChild' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<int[]> DialogueChildSamples()
		{
			return new List<int[]>(this.DialogueChild_marginal_F.Samples);
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueCPT' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPTMarginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>>(this.DialogueCPT_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'DialogueCPT' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<Vector[][][]> DialogueCPTSamples()
		{
			return new List<Vector[][][]>(this.DialogueCPT_marginal_F.Samples);
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_isDone = false;
					this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases_isDone = false;
					this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases_isDone = false;
				}
				this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases_isDone = false;
			}
			this.Constant();
			this.Changed_NumOfCases();
			this.Changed_numberOfIterationsDecreased_NumOfCases_Init_AllRels_AllTraits_DialogueCPTPrior_EventsPriors(initialise);
			this.Changed_DialogueCPTPrior();
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllRels_AllTraits_EventsPriors_NumOfCases(initialise);
			this.Changed_EventsPriors_numberOfIterationsDecreased_Init_AllRels_AllTraits_DialogueCPTPrior_NumOfCases(initialise);
			this.Changed_AllRels_AllTraits_DialogueCPTPrior_EventsPriors_numberOfIterations_NumOfCases(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="NumOfCases") {
				return this.NumOfCases;
			}
			if (variableName=="EventsPriors") {
				return this.EventsPriors;
			}
			if (variableName=="TraitsPriors") {
				return this.TraitsPriors;
			}
			if (variableName=="RelStatusPriors") {
				return this.RelStatusPriors;
			}
			if (variableName=="DialogueCPTPrior") {
				return this.DialogueCPTPrior;
			}
			if (variableName=="AllTraits") {
				return this.AllTraits;
			}
			if (variableName=="AllRels") {
				return this.AllRels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="DialogueChild") {
				return this.DialogueChildMarginal();
			}
			if (variableName=="DialogueCPT") {
				return this.DialogueCPTMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="DialogueChild")&&(query=="Samples")) {
				return this.DialogueChildSamples();
			}
			if ((variableName=="DialogueCPT")&&(query=="Samples")) {
				return this.DialogueCPTSamples();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="NumOfCases") {
				this.NumOfCases = (int)value;
				return ;
			}
			if (variableName=="EventsPriors") {
				this.EventsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="TraitsPriors") {
				this.TraitsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="RelStatusPriors") {
				this.RelStatusPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="DialogueCPTPrior") {
				this.DialogueCPTPrior = (Dirichlet[][][])value;
				return ;
			}
			if (variableName=="AllTraits") {
				this.AllTraits = (int[])value;
				return ;
			}
			if (variableName=="AllRels") {
				this.AllRels = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
