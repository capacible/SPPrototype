// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 4:19 PM on Tuesday, April 4, 2023.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Message to marginal of 'AllEvents'</summary>
		public DistributionRefArray<Discrete,int> AllEvents_marginal_F;
		/// <summary>Message to marginal of 'AllRels'</summary>
		public DistributionRefArray<Discrete,int> AllRels_marginal_F;
		/// <summary>Message to marginal of 'AllTraits'</summary>
		public DistributionRefArray<Discrete,int> AllTraits_marginal_F;
		/// <summary>True if Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0 has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0</summary>
		public bool Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone;
		/// <summary>True if Changed_DialogueCPTPrior has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior</summary>
		public bool Changed_DialogueCPTPrior_isDone;
		/// <summary>True if Changed_EventsPriors has executed. Set this to false to force re-execution of Changed_EventsPriors</summary>
		public bool Changed_EventsPriors_isDone;
		/// <summary>True if Changed_NumberOfCases has executed. Set this to false to force re-execution of Changed_NumberOfCases</summary>
		public bool Changed_NumberOfCases_isDone;
		/// <summary>True if Changed_RelStatusPriors has executed. Set this to false to force re-execution of Changed_RelStatusPriors</summary>
		public bool Changed_RelStatusPriors_isDone;
		/// <summary>True if Changed_TraitsPriors has executed. Set this to false to force re-execution of Changed_TraitsPriors</summary>
		public bool Changed_TraitsPriors_isDone;
		/// <summary>True if Changed_vint__7_vint23 has executed. Set this to false to force re-execution of Changed_vint__7_vint23</summary>
		public bool Changed_vint__7_vint23_isDone;
		/// <summary>True if Changed_vint__8_vint24 has executed. Set this to false to force re-execution of Changed_vint__8_vint24</summary>
		public bool Changed_vint__8_vint24_isDone;
		/// <summary>True if Changed_vint23 has executed. Set this to false to force re-execution of Changed_vint23</summary>
		public bool Changed_vint23_isDone;
		/// <summary>True if Changed_vint24 has executed. Set this to false to force re-execution of Changed_vint24</summary>
		public bool Changed_vint24_isDone;
		/// <summary>True if Changed_vint33 has executed. Set this to false to force re-execution of Changed_vint33</summary>
		public bool Changed_vint33_isDone;
		/// <summary>Message to marginal of 'DialogueCPT'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_marginal_F;
		/// <summary>Field backing the DialogueCPTPrior property</summary>
		private Dirichlet[][][] DialogueCPTPrior_field;
		/// <summary>Message to marginal of 'DialogueCPTPrior'</summary>
		public PointMass<Dirichlet[][][]> DialogueCPTPrior_marginal_F;
		/// <summary>Field backing the EventsPriors property</summary>
		private Dirichlet EventsPriors_field;
		/// <summary>Message to marginal of 'EventsPriors'</summary>
		public PointMass<Dirichlet> EventsPriors_marginal_F;
		/// <summary>Field backing the NumberOfCases property</summary>
		private int NumberOfCases_field;
		/// <summary>Message to marginal of 'NumberOfCases'</summary>
		public PointMass<int> NumberOfCases_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'PossibleEvents'</summary>
		public Dirichlet PossibleEvents_marginal_F;
		/// <summary>Message to marginal of 'PossibleRel'</summary>
		public Dirichlet PossibleRel_marginal_F;
		/// <summary>Message to marginal of 'PossibleTraits'</summary>
		public Dirichlet PossibleTraits_marginal_F;
		/// <summary>Field backing the RelStatusPriors property</summary>
		private Dirichlet RelStatusPriors_field;
		/// <summary>Message to marginal of 'RelStatusPriors'</summary>
		public PointMass<Dirichlet> RelStatusPriors_marginal_F;
		/// <summary>Field backing the TraitsPriors property</summary>
		private Dirichlet TraitsPriors_field;
		/// <summary>Message to marginal of 'TraitsPriors'</summary>
		public PointMass<Dirichlet> TraitsPriors_marginal_F;
		/// <summary>Message to marginal of 'vint__6'</summary>
		public DistributionRefArray<Discrete,int> vint__6_marginal_F;
		/// <summary>Field backing the vint__7 property</summary>
		private int[] vint__7_field;
		/// <summary>Message to marginal of 'vint__7'</summary>
		public DistributionRefArray<Discrete,int> vint__7_marginal_F;
		/// <summary>Field backing the vint__8 property</summary>
		private int[] vint__8_field;
		/// <summary>Message to marginal of 'vint__8'</summary>
		public DistributionRefArray<Discrete,int> vint__8_marginal_F;
		/// <summary>Field backing the vint23 property</summary>
		private int vint23_field;
		/// <summary>Message to marginal of 'vint23'</summary>
		public PointMass<int> vint23_marginal_F;
		/// <summary>Field backing the vint24 property</summary>
		private int vint24_field;
		/// <summary>Message to marginal of 'vint24'</summary>
		public PointMass<int> vint24_marginal_F;
		/// <summary>Field backing the vint33 property</summary>
		private int vint33_field;
		/// <summary>Message to marginal of 'vint33'</summary>
		public Discrete vint33_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'DialogueCPTPrior'</summary>
		public Dirichlet[][][] DialogueCPTPrior
		{
			get {
				return this.DialogueCPTPrior_field;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'DialogueCPTPrior\'");
				}
				this.DialogueCPTPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_DialogueCPTPrior_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPriors'</summary>
		public Dirichlet EventsPriors
		{
			get {
				return this.EventsPriors_field;
			}
			set {
				this.EventsPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_EventsPriors_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'NumberOfCases'</summary>
		public int NumberOfCases
		{
			get {
				return this.NumberOfCases_field;
			}
			set {
				if (this.NumberOfCases_field!=value) {
					this.NumberOfCases_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_NumberOfCases_isDone = false;
					this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
				}
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'RelStatusPriors'</summary>
		public Dirichlet RelStatusPriors
		{
			get {
				return this.RelStatusPriors_field;
			}
			set {
				this.RelStatusPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_RelStatusPriors_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'TraitsPriors'</summary>
		public Dirichlet TraitsPriors
		{
			get {
				return this.TraitsPriors_field;
			}
			set {
				this.TraitsPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_TraitsPriors_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__7'</summary>
		public int[] vint__7
		{
			get {
				return this.vint__7_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.vint23)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.vint23)+" was expected for variable \'vint__7\'");
				}
				this.vint__7_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__7_vint23_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__8'</summary>
		public int[] vint__8
		{
			get {
				return this.vint__8_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.vint24)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.vint24)+" was expected for variable \'vint__8\'");
				}
				this.vint__8_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__8_vint24_isDone = false;
				this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint23'</summary>
		public int vint23
		{
			get {
				return this.vint23_field;
			}
			set {
				if (this.vint23_field!=value) {
					this.vint23_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vint__7_vint23_isDone = false;
					this.Changed_vint23_isDone = false;
					this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vint24'</summary>
		public int vint24
		{
			get {
				return this.vint24_field;
			}
			set {
				if (this.vint24_field!=value) {
					this.vint24_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vint__8_vint24_isDone = false;
					this.Changed_vint24_isDone = false;
					this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vint33'</summary>
		public int vint33
		{
			get {
				return this.vint33_field;
			}
			set {
				if (this.vint33_field!=value) {
					this.vint33_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vint33_isDone = false;
					this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'AllEvents' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllEventsMarginal()
		{
			return this.AllEvents_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'AllRels' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllRelsMarginal()
		{
			return this.AllRels_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'AllTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllTraitsMarginal()
		{
			return this.AllTraits_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior</summary>
		private void Changed_DialogueCPTPrior()
		{
			if (this.Changed_DialogueCPTPrior_isDone) {
				return ;
			}
			// Create array for 'DialogueCPTPrior_marginal' Forwards messages.
			this.DialogueCPTPrior_marginal_F = new PointMass<Dirichlet[][][]>(this.DialogueCPTPrior);
			// Message to 'DialogueCPTPrior_marginal' from DerivedVariable factor
			this.DialogueCPTPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet[][][]>,Dirichlet[][][]>(this.DialogueCPTPrior, this.DialogueCPTPrior_marginal_F);
			this.Changed_DialogueCPTPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior and EventsPriors and NumberOfCases and RelStatusPriors and TraitsPriors and vint__7 and vint__8 and vint23 and vint24 and vint33</summary>
		private void Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0()
		{
			if (this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone) {
				return ;
			}
			this.PossibleEvents_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			Dirichlet PossibleEvents_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			Dirichlet[] PossibleEvents_uses_F;
			Dirichlet[] PossibleEvents_uses_B;
			// Create array for 'PossibleEvents_uses' Forwards messages.
			PossibleEvents_uses_F = new Dirichlet[2];
			// Create array for 'PossibleEvents_uses' Backwards messages.
			PossibleEvents_uses_B = new Dirichlet[2];
			PossibleEvents_uses_B[1] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			PossibleEvents_uses_B[0] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			PossibleEvents_uses_F[1] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			PossibleEvents_uses_F[0] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			Dirichlet[] PossibleEvents_rep2_B;
			// Create array for 'PossibleEvents_rep2' Backwards messages.
			PossibleEvents_rep2_B = new Dirichlet[this.vint23];
			for(int index5 = 0; index5<this.vint23; index5++) {
				PossibleEvents_rep2_B[index5] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
				// Message to 'PossibleEvents_rep2' from Discrete factor
				PossibleEvents_rep2_B[index5] = DiscreteFromDirichletOp.ProbsAverageConditional(this.vint__7[index5], PossibleEvents_rep2_B[index5]);
			}
			Dirichlet PossibleEvents_rep2_B_toDef;
			PossibleEvents_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(PossibleEvents_uses_F[1]);
			PossibleEvents_rep2_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(PossibleEvents_rep2_B, PossibleEvents_rep2_B_toDef);
			// Message to 'PossibleEvents_uses' from Replicate factor
			PossibleEvents_uses_B[1] = ArrayHelper.SetTo<Dirichlet>(PossibleEvents_uses_B[1], PossibleEvents_rep2_B_toDef);
			// Message to 'PossibleEvents_use' from Replicate factor
			PossibleEvents_use_B = ReplicateOp_NoDivide.DefAverageConditional<Dirichlet>(PossibleEvents_uses_B, PossibleEvents_use_B);
			// Message to 'PossibleEvents_marginal' from Variable factor
			this.PossibleEvents_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(PossibleEvents_use_B, this.EventsPriors, this.PossibleEvents_marginal_F);
			Dirichlet PossibleEvents_rep_F_marginal;
			PossibleEvents_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(PossibleEvents_uses_F[0]);
			Dirichlet PossibleEvents_rep_B_toDef;
			PossibleEvents_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(PossibleEvents_uses_F[0]);
			// Message to 'PossibleEvents_uses' from Replicate factor
			PossibleEvents_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Dirichlet>(PossibleEvents_uses_B, this.EventsPriors, 0, PossibleEvents_uses_F[0]);
			this.PossibleTraits_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			Dirichlet PossibleTraits_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			Dirichlet[] PossibleTraits_uses_F;
			Dirichlet[] PossibleTraits_uses_B;
			// Create array for 'PossibleTraits_uses' Forwards messages.
			PossibleTraits_uses_F = new Dirichlet[2];
			// Create array for 'PossibleTraits_uses' Backwards messages.
			PossibleTraits_uses_B = new Dirichlet[2];
			PossibleTraits_uses_B[1] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			PossibleTraits_uses_B[0] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			PossibleTraits_uses_F[1] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			PossibleTraits_uses_F[0] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			Dirichlet[] PossibleTraits_rep2_B;
			// Create array for 'PossibleTraits_rep2' Backwards messages.
			PossibleTraits_rep2_B = new Dirichlet[this.vint24];
			for(int index6 = 0; index6<this.vint24; index6++) {
				PossibleTraits_rep2_B[index6] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
				// Message to 'PossibleTraits_rep2' from Discrete factor
				PossibleTraits_rep2_B[index6] = DiscreteFromDirichletOp.ProbsAverageConditional(this.vint__8[index6], PossibleTraits_rep2_B[index6]);
			}
			Dirichlet PossibleTraits_rep2_B_toDef;
			PossibleTraits_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(PossibleTraits_uses_F[1]);
			PossibleTraits_rep2_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(PossibleTraits_rep2_B, PossibleTraits_rep2_B_toDef);
			// Message to 'PossibleTraits_uses' from Replicate factor
			PossibleTraits_uses_B[1] = ArrayHelper.SetTo<Dirichlet>(PossibleTraits_uses_B[1], PossibleTraits_rep2_B_toDef);
			// Message to 'PossibleTraits_use' from Replicate factor
			PossibleTraits_use_B = ReplicateOp_NoDivide.DefAverageConditional<Dirichlet>(PossibleTraits_uses_B, PossibleTraits_use_B);
			// Message to 'PossibleTraits_marginal' from Variable factor
			this.PossibleTraits_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(PossibleTraits_use_B, this.TraitsPriors, this.PossibleTraits_marginal_F);
			Dirichlet PossibleTraits_rep_F_marginal;
			PossibleTraits_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(PossibleTraits_uses_F[0]);
			Dirichlet PossibleTraits_rep_B_toDef;
			PossibleTraits_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(PossibleTraits_uses_F[0]);
			// Message to 'PossibleTraits_uses' from Replicate factor
			PossibleTraits_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Dirichlet>(PossibleTraits_uses_B, this.TraitsPriors, 0, PossibleTraits_uses_F[0]);
			this.PossibleRel_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			Dirichlet PossibleRel_use_B = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			Dirichlet[] PossibleRel_uses_F;
			Dirichlet[] PossibleRel_uses_B;
			// Create array for 'PossibleRel_uses' Forwards messages.
			PossibleRel_uses_F = new Dirichlet[2];
			// Create array for 'PossibleRel_uses' Backwards messages.
			PossibleRel_uses_B = new Dirichlet[2];
			PossibleRel_uses_B[1] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			PossibleRel_uses_B[0] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			PossibleRel_uses_F[0] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			// Message to 'PossibleRel_uses' from Discrete factor
			PossibleRel_uses_B[1] = DiscreteFromDirichletOp.ProbsAverageConditional(this.vint33, PossibleRel_uses_B[1]);
			// Message to 'PossibleRel_use' from Replicate factor
			PossibleRel_use_B = ReplicateOp_NoDivide.DefAverageConditional<Dirichlet>(PossibleRel_uses_B, PossibleRel_use_B);
			// Message to 'PossibleRel_marginal' from Variable factor
			this.PossibleRel_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(PossibleRel_use_B, this.RelStatusPriors, this.PossibleRel_marginal_F);
			Dirichlet PossibleRel_rep_F_marginal;
			PossibleRel_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(PossibleRel_uses_F[0]);
			Dirichlet PossibleRel_rep_B_toDef;
			PossibleRel_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(PossibleRel_uses_F[0]);
			// Message to 'PossibleRel_uses' from Replicate factor
			PossibleRel_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Dirichlet>(PossibleRel_uses_B, this.RelStatusPriors, 0, PossibleRel_uses_F[0]);
			// Create array for 'DialogueCPT_marginal' Forwards messages.
			this.DialogueCPT_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(2);
			// Create array for replicates of 'DialogueCPT_rep_B_toDef'
			Dirichlet[][][] DialogueCPT_rep_B_toDef = new Dirichlet[3][][];
			for(int Rel = 0; Rel<3; Rel++) {
				// Create array for replicates of 'DialogueCPT_rep_B_toDef'
				DialogueCPT_rep_B_toDef[Rel] = new Dirichlet[2][];
				for(int Events = 0; Events<2; Events++) {
					// Create array for replicates of 'DialogueCPT_rep_B_toDef'
					DialogueCPT_rep_B_toDef[Rel][Events] = new Dirichlet[2];
				}
				for(int Traits = 0; Traits<2; Traits++) {
					for(int Events = 0; Events<2; Events++) {
						DialogueCPT_rep_B_toDef[Rel][Events][Traits] = ReplicateOp_Divide.ToDefInit<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			for(int Events = 0; Events<2; Events++) {
				// Create array for 'DialogueCPT_marginal' Forwards messages.
				this.DialogueCPT_marginal_F[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(2);
			}
			for(int Traits = 0; Traits<2; Traits++) {
				for(int Events = 0; Events<2; Events++) {
					// Create array for 'DialogueCPT_marginal' Forwards messages.
					this.DialogueCPT_marginal_F[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(3);
				}
			}
			for(int Rel = 0; Rel<3; Rel++) {
				for(int Traits = 0; Traits<2; Traits++) {
					for(int Events = 0; Events<2; Events++) {
						this.DialogueCPT_marginal_F[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
						// Message to 'DialogueCPT_marginal' from Variable factor
						this.DialogueCPT_marginal_F[Events][Traits][Rel] = VariableOp.MarginalAverageConditional<Dirichlet>(DialogueCPT_rep_B_toDef[Rel][Events][Traits], this.DialogueCPTPrior[Events][Traits][Rel], this.DialogueCPT_marginal_F[Events][Traits][Rel]);
					}
				}
			}
			DistributionRefArray<Discrete,int> AllEvents_F;
			// Create array for 'AllEvents' Forwards messages.
			AllEvents_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for 'AllEvents_marginal' Forwards messages.
			this.AllEvents_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			Dirichlet[] PossibleTraits_rep_B;
			// Create array for 'PossibleTraits_rep' Backwards messages.
			PossibleTraits_rep_B = new Dirichlet[this.NumberOfCases];
			DistributionRefArray<Discrete,int> AllTraits_use_B;
			// Create array for 'AllTraits_use' Backwards messages.
			AllTraits_use_B = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for 'AllTraits_marginal' Forwards messages.
			this.AllTraits_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			Dirichlet[] PossibleTraits_rep_F;
			// Create array for 'PossibleTraits_rep' Forwards messages.
			PossibleTraits_rep_F = new Dirichlet[this.NumberOfCases];
			Dirichlet[] PossibleEvents_rep_B;
			// Create array for 'PossibleEvents_rep' Backwards messages.
			PossibleEvents_rep_B = new Dirichlet[this.NumberOfCases];
			PossibleTraits_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(PossibleTraits_rep_B_toDef, PossibleTraits_uses_F[0], PossibleTraits_rep_F_marginal);
			Dirichlet[] PossibleEvents_rep_F;
			// Create array for 'PossibleEvents_rep' Forwards messages.
			PossibleEvents_rep_F = new Dirichlet[this.NumberOfCases];
			DistributionRefArray<Discrete,int> AllTraits_F;
			// Create array for 'AllTraits' Forwards messages.
			AllTraits_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			PossibleEvents_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(PossibleEvents_rep_B_toDef, PossibleEvents_uses_F[0], PossibleEvents_rep_F_marginal);
			DistributionRefArray<Discrete,int> AllEvents_use_B;
			// Create array for 'AllEvents_use' Backwards messages.
			AllEvents_use_B = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for replicates of 'vint__6_NCases_2_Traits_F'
			Discrete[][][] vint__6_NCases_2_Traits_F = new Discrete[this.NumberOfCases][][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F_marginal'
			Discrete[][] AllTraits_NCases__Rel_selector_uses_F_marginal = new Discrete[this.NumberOfCases][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F'
			Discrete[][][] AllTraits_NCases__Rel_selector_uses_F = new Discrete[this.NumberOfCases][][];
			DistributionRefArray<Discrete,int> vint__6_F;
			// Create array for 'vint__6' Forwards messages.
			vint__6_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for replicates of 'AllRels_NCases__selector_cases_uses_F'
			DistributionStructArray<Bernoulli,bool>[][] AllRels_NCases__selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][];
			// Create array for replicates of 'AllRels_NCases__selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] AllRels_NCases__selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][];
			// Create array for 'vint__6_marginal' Forwards messages.
			this.vint__6_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for replicates of 'AllRels_NCases__selector_cases_F'
			DistributionStructArray<Bernoulli,bool>[] AllRels_NCases__selector_cases_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases];
			DistributionRefArray<Discrete,int> AllRels_F;
			// Create array for 'AllRels' Forwards messages.
			AllRels_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for 'AllRels_marginal' Forwards messages.
			this.AllRels_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			// Create array for replicates of 'AllRels_NCases__selector_uses_F_marginal'
			Discrete[] AllRels_NCases__selector_uses_F_marginal = new Discrete[this.NumberOfCases];
			Dirichlet[] PossibleRel_rep_F;
			// Create array for 'PossibleRel_rep' Forwards messages.
			PossibleRel_rep_F = new Dirichlet[this.NumberOfCases];
			// Create array for replicates of 'AllRels_NCases__selector_uses_B_toDef'
			Discrete[] AllRels_NCases__selector_uses_B_toDef = new Discrete[this.NumberOfCases];
			Dirichlet[] PossibleRel_rep_B;
			// Create array for 'PossibleRel_rep' Backwards messages.
			PossibleRel_rep_B = new Dirichlet[this.NumberOfCases];
			// Create array for replicates of 'AllRels_NCases__selector_uses_B'
			Discrete[][] AllRels_NCases__selector_uses_B = new Discrete[this.NumberOfCases][];
			PossibleRel_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(PossibleRel_rep_B_toDef, PossibleRel_uses_F[0], PossibleRel_rep_F_marginal);
			// Create array for replicates of 'AllRels_NCases__selector_uses_F'
			Discrete[][] AllRels_NCases__selector_uses_F = new Discrete[this.NumberOfCases][];
			// Create array for replicates of 'vint__6_NCases_3_Events_F'
			Discrete[][][][] vint__6_NCases_3_Events_F = new Discrete[this.NumberOfCases][][][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B_toDef'
			Discrete[][] AllTraits_NCases__Rel_selector_uses_B_toDef = new Discrete[this.NumberOfCases][];
			// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][][] AllEvents_NCases_2_Traits_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][][][];
			// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_F'
			DistributionStructArray<Bernoulli,bool>[][][][] AllEvents_NCases_2_Traits_selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][][][];
			// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_F'
			DistributionStructArray<Bernoulli,bool>[][][] AllEvents_NCases_2_Traits_selector_cases_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][][];
			// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_B'
			Discrete[][][][] AllEvents_NCases_2_Traits_selector_uses_B = new Discrete[this.NumberOfCases][][][];
			// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_F'
			Discrete[][][][] AllEvents_NCases_2_Traits_selector_uses_F = new Discrete[this.NumberOfCases][][][];
			// Create array for replicates of 'vint__6_NCases__Rel_F'
			Discrete[][] vint__6_NCases__Rel_F = new Discrete[this.NumberOfCases][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][] AllTraits_NCases__Rel_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_F'
			DistributionStructArray<Bernoulli,bool>[][][] AllTraits_NCases__Rel_selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_F'
			DistributionStructArray<Bernoulli,bool>[][] AllTraits_NCases__Rel_selector_cases_F = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][];
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B'
			Discrete[][][] AllTraits_NCases__Rel_selector_uses_B = new Discrete[this.NumberOfCases][][];
			// Create array for replicates of 'DialogueCPT_rep_F'
			Dirichlet[][][][] DialogueCPT_rep_F = new Dirichlet[3][][][];
			// Create array for replicates of 'DialogueCPT_rep_B'
			Dirichlet[][][][] DialogueCPT_rep_B = new Dirichlet[3][][][];
			// Create array for replicates of 'DialogueCPT_rep_F_marginal'
			Dirichlet[][][] DialogueCPT_rep_F_marginal = new Dirichlet[3][][];
			for(int Rel = 0; Rel<3; Rel++) {
				// Create array for replicates of 'DialogueCPT_rep_F'
				DialogueCPT_rep_F[Rel] = new Dirichlet[2][][];
				// Create array for replicates of 'DialogueCPT_rep_B'
				DialogueCPT_rep_B[Rel] = new Dirichlet[2][][];
				// Create array for replicates of 'DialogueCPT_rep_F_marginal'
				DialogueCPT_rep_F_marginal[Rel] = new Dirichlet[2][];
				for(int Events = 0; Events<2; Events++) {
					// Create array for replicates of 'DialogueCPT_rep_F'
					DialogueCPT_rep_F[Rel][Events] = new Dirichlet[2][];
					// Create array for replicates of 'DialogueCPT_rep_B'
					DialogueCPT_rep_B[Rel][Events] = new Dirichlet[2][];
					// Create array for replicates of 'DialogueCPT_rep_F_marginal'
					DialogueCPT_rep_F_marginal[Rel][Events] = new Dirichlet[2];
				}
				for(int Traits = 0; Traits<2; Traits++) {
					for(int Events = 0; Events<2; Events++) {
						// Create array for 'DialogueCPT_rep' Forwards messages.
						DialogueCPT_rep_F[Rel][Events][Traits] = new Dirichlet[this.NumberOfCases];
						// Create array for 'DialogueCPT_rep' Backwards messages.
						DialogueCPT_rep_B[Rel][Events][Traits] = new Dirichlet[this.NumberOfCases];
						DialogueCPT_rep_F_marginal[Rel][Events][Traits] = ReplicateOp_Divide.MarginalInit<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
						DialogueCPT_rep_F_marginal[Rel][Events][Traits] = ReplicateOp_Divide.Marginal<Dirichlet>(DialogueCPT_rep_B_toDef[Rel][Events][Traits], this.DialogueCPTPrior[Events][Traits][Rel], DialogueCPT_rep_F_marginal[Rel][Events][Traits]);
					}
				}
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				for(int Rel = 0; Rel<3; Rel++) {
					for(int Traits = 0; Traits<2; Traits++) {
						for(int Events = 0; Events<2; Events++) {
							DialogueCPT_rep_B[Rel][Events][Traits][NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
							DialogueCPT_rep_F[Rel][Events][Traits][NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
							// Message to 'DialogueCPT_rep' from Replicate factor
							DialogueCPT_rep_F[Rel][Events][Traits][NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(DialogueCPT_rep_B[Rel][Events][Traits][NCases], DialogueCPT_rep_F_marginal[Rel][Events][Traits], NCases, DialogueCPT_rep_F[Rel][Events][Traits][NCases]);
						}
					}
				}
			}
			Discrete vint__6_use_B_reduced;
			vint__6_use_B_reduced = default(Discrete);
			if (this.NumberOfCases>0) {
				vint__6_use_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllEvents_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				PossibleEvents_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
				PossibleEvents_rep_F[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
				// Message to 'PossibleEvents_rep' from Replicate factor
				PossibleEvents_rep_F[NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(PossibleEvents_rep_B[NCases], PossibleEvents_rep_F_marginal, NCases, PossibleEvents_rep_F[NCases]);
				this.AllEvents_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				AllEvents_use_B[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				// Message to 'AllEvents' from Discrete factor
				AllEvents_F[NCases] = DiscreteFromDirichletOp.SampleAverageConditional(PossibleEvents_rep_F[NCases], AllEvents_F[NCases]);
				// Message to 'AllEvents_marginal' from Variable factor
				this.AllEvents_marginal_F[NCases] = VariableOp.MarginalAverageConditional<Discrete>(AllEvents_use_B[NCases], AllEvents_F[NCases], this.AllEvents_marginal_F[NCases]);
				AllTraits_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				PossibleTraits_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
				PossibleTraits_rep_F[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
				// Message to 'PossibleTraits_rep' from Replicate factor
				PossibleTraits_rep_F[NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(PossibleTraits_rep_B[NCases], PossibleTraits_rep_F_marginal, NCases, PossibleTraits_rep_F[NCases]);
				this.AllTraits_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				AllTraits_use_B[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F_marginal'
				AllTraits_NCases__Rel_selector_uses_F_marginal[NCases] = new Discrete[3];
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_F'
				AllTraits_NCases__Rel_selector_cases_uses_F[NCases] = new DistributionStructArray<Bernoulli,bool>[3][];
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_B'
				AllTraits_NCases__Rel_selector_cases_uses_B[NCases] = new DistributionStructArray<Bernoulli,bool>[3][];
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_F'
				AllTraits_NCases__Rel_selector_cases_F[NCases] = new DistributionStructArray<Bernoulli,bool>[3];
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B_toDef'
				AllTraits_NCases__Rel_selector_uses_B_toDef[NCases] = new Discrete[3];
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F'
				AllTraits_NCases__Rel_selector_uses_F[NCases] = new Discrete[3][];
				// Message to 'AllTraits' from Discrete factor
				AllTraits_F[NCases] = DiscreteFromDirichletOp.SampleAverageConditional(PossibleTraits_rep_F[NCases], AllTraits_F[NCases]);
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B'
				AllTraits_NCases__Rel_selector_uses_B[NCases] = new Discrete[3][];
				// Create array for replicates of 'vint__6_NCases_2_Traits_F'
				vint__6_NCases_2_Traits_F[NCases] = new Discrete[3][];
				// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_F'
				AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases] = new DistributionStructArray<Bernoulli,bool>[3][][];
				// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_F'
				AllEvents_NCases_2_Traits_selector_cases_F[NCases] = new DistributionStructArray<Bernoulli,bool>[3][];
				// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_B'
				AllEvents_NCases_2_Traits_selector_uses_B[NCases] = new Discrete[3][][];
				// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_F'
				AllEvents_NCases_2_Traits_selector_uses_F[NCases] = new Discrete[3][][];
				// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_B'
				AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases] = new DistributionStructArray<Bernoulli,bool>[3][][];
				// Create array for replicates of 'vint__6_NCases__Rel_F'
				vint__6_NCases__Rel_F[NCases] = new Discrete[3];
				// Create array for replicates of 'vint__6_NCases_3_Events_F'
				vint__6_NCases_3_Events_F[NCases] = new Discrete[3][][];
				for(int Rel = 0; Rel<3; Rel++) {
					AllTraits_NCases__Rel_selector_uses_F_marginal[NCases][Rel] = ReplicateOp_Divide.MarginalInit<Discrete>(AllTraits_F[NCases]);
					AllTraits_NCases__Rel_selector_uses_B_toDef[NCases][Rel] = ReplicateOp_Divide.ToDefInit<Discrete>(AllTraits_F[NCases]);
					// Create array for 'AllTraits_NCases__Rel_selector_uses' Forwards messages.
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel] = new Discrete[3];
					// Create array for 'AllTraits_NCases__Rel_selector_uses' Backwards messages.
					AllTraits_NCases__Rel_selector_uses_B[NCases][Rel] = new Discrete[3];
					AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
					AllTraits_NCases__Rel_selector_uses_F_marginal[NCases][Rel] = ReplicateOp_Divide.Marginal<Discrete>(AllTraits_NCases__Rel_selector_uses_B_toDef[NCases][Rel], AllTraits_F[NCases], AllTraits_NCases__Rel_selector_uses_F_marginal[NCases][Rel]);
					// Message to 'AllTraits_NCases__Rel_selector_uses' from Replicate factor
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][0], AllTraits_NCases__Rel_selector_uses_F_marginal[NCases][Rel], 0, AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0]);
					// Create array for 'AllTraits_NCases__Rel_selector_cases' Forwards messages.
					AllTraits_NCases__Rel_selector_cases_F[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int Traits = 0; Traits<2; Traits++) {
						AllTraits_NCases__Rel_selector_cases_F[NCases][Rel][Traits] = Bernoulli.Uniform();
						// Message to 'AllTraits_NCases__Rel_selector_cases' from CasesInt factor
						AllTraits_NCases__Rel_selector_cases_F[NCases][Rel][Traits] = IntCasesOp.CasesAverageConditional(AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0], Traits);
					}
					// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Forwards messages.
					AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>[2];
					// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Backwards messages.
					AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>[2];
					// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Backwards messages.
					AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][0] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int Traits = 0; Traits<2; Traits++) {
						AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][0][Traits] = Bernoulli.Uniform();
					}
					// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Forwards messages.
					AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel][1] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int Traits = 0; Traits<2; Traits++) {
						AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel][1][Traits] = Bernoulli.Uniform();
					}
					// Message to 'AllTraits_NCases__Rel_selector_cases_uses' from Replicate factor
					AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel], AllTraits_NCases__Rel_selector_cases_F[NCases][Rel], 1, AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel][1]);
					vint__6_NCases__Rel_F[NCases][Rel] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
					// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_F'
					AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel] = new Discrete[2][];
					// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_uses_B'
					AllEvents_NCases_2_Traits_selector_uses_B[NCases][Rel] = new Discrete[2][];
					// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_F'
					AllEvents_NCases_2_Traits_selector_cases_F[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>[2];
					// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_F'
					AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>[2][];
					// Create array for replicates of 'AllEvents_NCases_2_Traits_selector_cases_uses_B'
					AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>[2][];
					// Create array for replicates of 'vint__6_NCases_2_Traits_F'
					vint__6_NCases_2_Traits_F[NCases][Rel] = new Discrete[2];
					// Create array for replicates of 'vint__6_NCases_3_Events_F'
					vint__6_NCases_3_Events_F[NCases][Rel] = new Discrete[2][];
					for(int Traits = 0; Traits<2; Traits++) {
						// Create array for 'AllEvents_NCases_2_Traits_selector_uses' Forwards messages.
						AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel][Traits] = new Discrete[2];
						// Create array for 'AllEvents_NCases_2_Traits_selector_uses' Backwards messages.
						AllEvents_NCases_2_Traits_selector_uses_B[NCases][Rel][Traits] = new Discrete[2];
						AllEvents_NCases_2_Traits_selector_uses_B[NCases][Rel][Traits][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
						AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel][Traits][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
						// Message to 'AllEvents_NCases_2_Traits_selector_uses' from Replicate factor
						AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel][Traits][0] = ReplicateOp_NoDivide.UsesAverageConditional<Discrete>(AllEvents_NCases_2_Traits_selector_uses_B[NCases][Rel][Traits], AllEvents_F[NCases], 0, AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel][Traits][0]);
						// Create array for 'AllEvents_NCases_2_Traits_selector_cases' Forwards messages.
						AllEvents_NCases_2_Traits_selector_cases_F[NCases][Rel][Traits] = new DistributionStructArray<Bernoulli,bool>(2);
						for(int Events = 0; Events<2; Events++) {
							AllEvents_NCases_2_Traits_selector_cases_F[NCases][Rel][Traits][Events] = Bernoulli.Uniform();
							// Message to 'AllEvents_NCases_2_Traits_selector_cases' from CasesInt factor
							AllEvents_NCases_2_Traits_selector_cases_F[NCases][Rel][Traits][Events] = IntCasesOp.CasesAverageConditional(AllEvents_NCases_2_Traits_selector_uses_F[NCases][Rel][Traits][0], Events);
						}
						// Create array for 'AllEvents_NCases_2_Traits_selector_cases_uses' Forwards messages.
						AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits] = new DistributionStructArray<Bernoulli,bool>[2];
						// Create array for 'AllEvents_NCases_2_Traits_selector_cases_uses' Backwards messages.
						AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases][Rel][Traits] = new DistributionStructArray<Bernoulli,bool>[2];
						// Create array for 'AllEvents_NCases_2_Traits_selector_cases_uses' Backwards messages.
						AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases][Rel][Traits][0] = new DistributionStructArray<Bernoulli,bool>(2);
						for(int Events = 0; Events<2; Events++) {
							AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases][Rel][Traits][0][Events] = Bernoulli.Uniform();
						}
						// Create array for 'AllEvents_NCases_2_Traits_selector_cases_uses' Forwards messages.
						AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits][1] = new DistributionStructArray<Bernoulli,bool>(2);
						for(int Events = 0; Events<2; Events++) {
							AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits][1][Events] = Bernoulli.Uniform();
						}
						// Message to 'AllEvents_NCases_2_Traits_selector_cases_uses' from Replicate factor
						AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(AllEvents_NCases_2_Traits_selector_cases_uses_B[NCases][Rel][Traits], AllEvents_NCases_2_Traits_selector_cases_F[NCases][Rel][Traits], 1, AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits][1]);
						vint__6_NCases_2_Traits_F[NCases][Rel][Traits] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
						// Create array for replicates of 'vint__6_NCases_3_Events_F'
						vint__6_NCases_3_Events_F[NCases][Rel][Traits] = new Discrete[2];
						for(int Events = 0; Events<2; Events++) {
							vint__6_NCases_3_Events_F[NCases][Rel][Traits][Events] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
							// Message to 'vint__6_NCases_3_Events' from Discrete factor
							vint__6_NCases_3_Events_F[NCases][Rel][Traits][Events] = DiscreteFromDirichletOp.SampleAverageConditional(DialogueCPT_rep_F[Rel][Events][Traits][NCases], vint__6_NCases_3_Events_F[NCases][Rel][Traits][Events]);
						}
						// Message to 'vint__6_NCases_2_Traits' from Exit factor
						vint__6_NCases_2_Traits_F[NCases][Rel][Traits] = BeliefPropagationGateExitOp.ExitAverageConditional<Discrete>(AllEvents_NCases_2_Traits_selector_cases_uses_F[NCases][Rel][Traits][1], vint__6_NCases_3_Events_F[NCases][Rel][Traits], vint__6_NCases_2_Traits_F[NCases][Rel][Traits]);
					}
					// Message to 'vint__6_NCases__Rel' from Exit factor
					vint__6_NCases__Rel_F[NCases][Rel] = BeliefPropagationGateExitOp.ExitAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_cases_uses_F[NCases][Rel][1], vint__6_NCases_2_Traits_F[NCases][Rel], vint__6_NCases__Rel_F[NCases][Rel]);
				}
				// Message to 'AllTraits_marginal' from Variable factor
				this.AllTraits_marginal_F[NCases] = VariableOp.MarginalAverageConditional<Discrete>(AllTraits_use_B[NCases], AllTraits_F[NCases], this.AllTraits_marginal_F[NCases]);
				AllRels_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(3));
				PossibleRel_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
				PossibleRel_rep_F[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
				// Message to 'PossibleRel_rep' from Replicate factor
				PossibleRel_rep_F[NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(PossibleRel_rep_B[NCases], PossibleRel_rep_F_marginal, NCases, PossibleRel_rep_F[NCases]);
				this.AllRels_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(3));
				AllRels_NCases__selector_uses_F_marginal[NCases] = ReplicateOp_Divide.MarginalInit<Discrete>(AllRels_F[NCases]);
				AllRels_NCases__selector_uses_B_toDef[NCases] = ReplicateOp_Divide.ToDefInit<Discrete>(AllRels_F[NCases]);
				// Message to 'AllRels' from Discrete factor
				AllRels_F[NCases] = DiscreteFromDirichletOp.SampleAverageConditional(PossibleRel_rep_F[NCases], AllRels_F[NCases]);
				// Message to 'AllRels_marginal' from Variable factor
				this.AllRels_marginal_F[NCases] = VariableOp.MarginalAverageConditional<Discrete>(AllRels_NCases__selector_uses_B_toDef[NCases], AllRels_F[NCases], this.AllRels_marginal_F[NCases]);
				vint__6_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
				this.vint__6_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(870));
				// Create array for 'AllRels_NCases__selector_uses' Forwards messages.
				AllRels_NCases__selector_uses_F[NCases] = new Discrete[4];
				// Create array for 'AllRels_NCases__selector_uses' Backwards messages.
				AllRels_NCases__selector_uses_B[NCases] = new Discrete[4];
				AllRels_NCases__selector_uses_B[NCases][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(3));
				AllRels_NCases__selector_uses_F[NCases][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(3));
				AllRels_NCases__selector_uses_F_marginal[NCases] = ReplicateOp_Divide.Marginal<Discrete>(AllRels_NCases__selector_uses_B_toDef[NCases], AllRels_F[NCases], AllRels_NCases__selector_uses_F_marginal[NCases]);
				// Message to 'AllRels_NCases__selector_uses' from Replicate factor
				AllRels_NCases__selector_uses_F[NCases][0] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllRels_NCases__selector_uses_B[NCases][0], AllRels_NCases__selector_uses_F_marginal[NCases], 0, AllRels_NCases__selector_uses_F[NCases][0]);
				// Create array for 'AllRels_NCases__selector_cases' Forwards messages.
				AllRels_NCases__selector_cases_F[NCases] = new DistributionStructArray<Bernoulli,bool>(3);
				for(int Rel = 0; Rel<3; Rel++) {
					AllRels_NCases__selector_cases_F[NCases][Rel] = Bernoulli.Uniform();
					// Message to 'AllRels_NCases__selector_cases' from CasesInt factor
					AllRels_NCases__selector_cases_F[NCases][Rel] = IntCasesOp.CasesAverageConditional(AllRels_NCases__selector_uses_F[NCases][0], Rel);
				}
				// Create array for 'AllRels_NCases__selector_cases_uses' Forwards messages.
				AllRels_NCases__selector_cases_uses_F[NCases] = new DistributionStructArray<Bernoulli,bool>[2];
				// Create array for 'AllRels_NCases__selector_cases_uses' Backwards messages.
				AllRels_NCases__selector_cases_uses_B[NCases] = new DistributionStructArray<Bernoulli,bool>[2];
				// Create array for 'AllRels_NCases__selector_cases_uses' Backwards messages.
				AllRels_NCases__selector_cases_uses_B[NCases][0] = new DistributionStructArray<Bernoulli,bool>(3);
				for(int Rel = 0; Rel<3; Rel++) {
					AllRels_NCases__selector_cases_uses_B[NCases][0][Rel] = Bernoulli.Uniform();
				}
				// Create array for 'AllRels_NCases__selector_cases_uses' Forwards messages.
				AllRels_NCases__selector_cases_uses_F[NCases][1] = new DistributionStructArray<Bernoulli,bool>(3);
				for(int Rel = 0; Rel<3; Rel++) {
					AllRels_NCases__selector_cases_uses_F[NCases][1][Rel] = Bernoulli.Uniform();
				}
				// Message to 'AllRels_NCases__selector_cases_uses' from Replicate factor
				AllRels_NCases__selector_cases_uses_F[NCases][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(AllRels_NCases__selector_cases_uses_B[NCases], AllRels_NCases__selector_cases_F[NCases], 1, AllRels_NCases__selector_cases_uses_F[NCases][1]);
				// Message to 'vint__6' from Exit factor
				vint__6_F[NCases] = BeliefPropagationGateExitOp.ExitAverageConditional<Discrete>(AllRels_NCases__selector_cases_uses_F[NCases][1], vint__6_NCases__Rel_F[NCases], vint__6_F[NCases]);
				// Message to 'vint__6_marginal' from DerivedVariable factor
				this.vint__6_marginal_F[NCases] = DerivedVariableOp.MarginalAverageConditional<Discrete>(vint__6_use_B_reduced, vint__6_F[NCases], this.vint__6_marginal_F[NCases]);
			}
			this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPriors</summary>
		private void Changed_EventsPriors()
		{
			if (this.Changed_EventsPriors_isDone) {
				return ;
			}
			this.EventsPriors_marginal_F = new PointMass<Dirichlet>(this.EventsPriors);
			// Message to 'EventsPriors_marginal' from DerivedVariable factor
			this.EventsPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.EventsPriors, this.EventsPriors_marginal_F);
			this.Changed_EventsPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases</summary>
		private void Changed_NumberOfCases()
		{
			if (this.Changed_NumberOfCases_isDone) {
				return ;
			}
			this.NumberOfCases_marginal_F = new PointMass<int>(this.NumberOfCases);
			// Message to 'NumberOfCases_marginal' from DerivedVariable factor
			this.NumberOfCases_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.NumberOfCases, this.NumberOfCases_marginal_F);
			this.Changed_NumberOfCases_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of RelStatusPriors</summary>
		private void Changed_RelStatusPriors()
		{
			if (this.Changed_RelStatusPriors_isDone) {
				return ;
			}
			this.RelStatusPriors_marginal_F = new PointMass<Dirichlet>(this.RelStatusPriors);
			// Message to 'RelStatusPriors_marginal' from DerivedVariable factor
			this.RelStatusPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.RelStatusPriors, this.RelStatusPriors_marginal_F);
			this.Changed_RelStatusPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of TraitsPriors</summary>
		private void Changed_TraitsPriors()
		{
			if (this.Changed_TraitsPriors_isDone) {
				return ;
			}
			this.TraitsPriors_marginal_F = new PointMass<Dirichlet>(this.TraitsPriors);
			// Message to 'TraitsPriors_marginal' from DerivedVariable factor
			this.TraitsPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.TraitsPriors, this.TraitsPriors_marginal_F);
			this.Changed_TraitsPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__7 and vint23</summary>
		private void Changed_vint__7_vint23()
		{
			if (this.Changed_vint__7_vint23_isDone) {
				return ;
			}
			// Create array for 'vint__7_marginal' Forwards messages.
			this.vint__7_marginal_F = new DistributionRefArray<Discrete,int>(this.vint23);
			for(int index5 = 0; index5<this.vint23; index5++) {
				this.vint__7_marginal_F[index5] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			// Message to 'vint__7_marginal' from DerivedVariable factor
			this.vint__7_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<Discrete,int>,int[]>(this.vint__7, this.vint__7_marginal_F);
			this.Changed_vint__7_vint23_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__8 and vint24</summary>
		private void Changed_vint__8_vint24()
		{
			if (this.Changed_vint__8_vint24_isDone) {
				return ;
			}
			// Create array for 'vint__8_marginal' Forwards messages.
			this.vint__8_marginal_F = new DistributionRefArray<Discrete,int>(this.vint24);
			for(int index6 = 0; index6<this.vint24; index6++) {
				this.vint__8_marginal_F[index6] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			// Message to 'vint__8_marginal' from DerivedVariable factor
			this.vint__8_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<Discrete,int>,int[]>(this.vint__8, this.vint__8_marginal_F);
			this.Changed_vint__8_vint24_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint23</summary>
		private void Changed_vint23()
		{
			if (this.Changed_vint23_isDone) {
				return ;
			}
			this.vint23_marginal_F = new PointMass<int>(this.vint23);
			// Message to 'vint23_marginal' from DerivedVariable factor
			this.vint23_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.vint23, this.vint23_marginal_F);
			this.Changed_vint23_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint24</summary>
		private void Changed_vint24()
		{
			if (this.Changed_vint24_isDone) {
				return ;
			}
			this.vint24_marginal_F = new PointMass<int>(this.vint24);
			// Message to 'vint24_marginal' from DerivedVariable factor
			this.vint24_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.vint24, this.vint24_marginal_F);
			this.Changed_vint24_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint33</summary>
		private void Changed_vint33()
		{
			if (this.Changed_vint33_isDone) {
				return ;
			}
			this.vint33_marginal_F = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(3));
			// Message to 'vint33_marginal' from DerivedVariable factor
			this.vint33_marginal_F = DerivedVariableOp.MarginalAverageConditional<Discrete,int>(this.vint33, this.vint33_marginal_F);
			this.Changed_vint33_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueCPT' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPTMarginal()
		{
			return this.DialogueCPT_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueCPTPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet[][][]> DialogueCPTPriorMarginal()
		{
			return this.DialogueCPTPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> EventsPriorsMarginal()
		{
			return this.EventsPriors_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vint33();
			this.Changed_vint__8_vint24();
			this.Changed_vint__7_vint23();
			this.Changed_vint24();
			this.Changed_vint23();
			this.Changed_DialogueCPTPrior();
			this.Changed_RelStatusPriors();
			this.Changed_TraitsPriors();
			this.Changed_EventsPriors();
			this.Changed_NumberOfCases();
			this.Changed_DialogueCPTPrior_EventsPriors_NumberOfCases_RelStatusPriors_TraitsPriors_vint__7_vint__8_vin0();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="NumberOfCases") {
				return this.NumberOfCases;
			}
			if (variableName=="EventsPriors") {
				return this.EventsPriors;
			}
			if (variableName=="TraitsPriors") {
				return this.TraitsPriors;
			}
			if (variableName=="RelStatusPriors") {
				return this.RelStatusPriors;
			}
			if (variableName=="DialogueCPTPrior") {
				return this.DialogueCPTPrior;
			}
			if (variableName=="vint23") {
				return this.vint23;
			}
			if (variableName=="vint24") {
				return this.vint24;
			}
			if (variableName=="vint__7") {
				return this.vint__7;
			}
			if (variableName=="vint__8") {
				return this.vint__8;
			}
			if (variableName=="vint33") {
				return this.vint33;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vint33") {
				return this.Vint33Marginal();
			}
			if (variableName=="vint__8") {
				return this.Vint__8Marginal();
			}
			if (variableName=="vint__7") {
				return this.Vint__7Marginal();
			}
			if (variableName=="vint24") {
				return this.Vint24Marginal();
			}
			if (variableName=="vint23") {
				return this.Vint23Marginal();
			}
			if (variableName=="DialogueCPTPrior") {
				return this.DialogueCPTPriorMarginal();
			}
			if (variableName=="RelStatusPriors") {
				return this.RelStatusPriorsMarginal();
			}
			if (variableName=="TraitsPriors") {
				return this.TraitsPriorsMarginal();
			}
			if (variableName=="EventsPriors") {
				return this.EventsPriorsMarginal();
			}
			if (variableName=="NumberOfCases") {
				return this.NumberOfCasesMarginal();
			}
			if (variableName=="PossibleEvents") {
				return this.PossibleEventsMarginal();
			}
			if (variableName=="PossibleTraits") {
				return this.PossibleTraitsMarginal();
			}
			if (variableName=="PossibleRel") {
				return this.PossibleRelMarginal();
			}
			if (variableName=="DialogueCPT") {
				return this.DialogueCPTMarginal();
			}
			if (variableName=="AllEvents") {
				return this.AllEventsMarginal();
			}
			if (variableName=="AllTraits") {
				return this.AllTraitsMarginal();
			}
			if (variableName=="AllRels") {
				return this.AllRelsMarginal();
			}
			if (variableName=="vint__6") {
				return this.Vint__6Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'NumberOfCases' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NumberOfCasesMarginal()
		{
			return this.NumberOfCases_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleEvents' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleEventsMarginal()
		{
			return this.PossibleEvents_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleRel' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleRelMarginal()
		{
			return this.PossibleRel_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleTraitsMarginal()
		{
			return this.PossibleTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'RelStatusPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> RelStatusPriorsMarginal()
		{
			return this.RelStatusPriors_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="NumberOfCases") {
				this.NumberOfCases = (int)value;
				return ;
			}
			if (variableName=="EventsPriors") {
				this.EventsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="TraitsPriors") {
				this.TraitsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="RelStatusPriors") {
				this.RelStatusPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="DialogueCPTPrior") {
				this.DialogueCPTPrior = (Dirichlet[][][])value;
				return ;
			}
			if (variableName=="vint23") {
				this.vint23 = (int)value;
				return ;
			}
			if (variableName=="vint24") {
				this.vint24 = (int)value;
				return ;
			}
			if (variableName=="vint__7") {
				this.vint__7 = (int[])value;
				return ;
			}
			if (variableName=="vint__8") {
				this.vint__8 = (int[])value;
				return ;
			}
			if (variableName=="vint33") {
				this.vint33 = (int)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'TraitsPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> TraitsPriorsMarginal()
		{
			return this.TraitsPriors_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__6Marginal()
		{
			return this.vint__6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__7Marginal()
		{
			return this.vint__7_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__8' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__8Marginal()
		{
			return this.vint__8_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint23' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint23Marginal()
		{
			return this.vint23_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint24' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint24Marginal()
		{
			return this.vint24_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint33' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Discrete Vint33Marginal()
		{
			return this.vint33_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
