// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 6:15 PM on Tuesday, May 16, 2023.
	/// </remarks>
	public partial class Model17_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the AllEvents property</summary>
		private int[] AllEvents_field;
		/// <summary>Message to marginal of 'AllEvents'</summary>
		public DistributionRefArray<Discrete,int> AllEvents_marginal_F;
		/// <summary>Message to marginal of 'AllRels'</summary>
		public DistributionRefArray<Discrete,int> AllRels_marginal_F;
		/// <summary>Message to marginal of 'AllTraits'</summary>
		public DistributionRefArray<Discrete,int> AllTraits_marginal_F;
		public DistributionStructArray<Bernoulli,bool>[][] AllTraits_NCases__Rel_selector_cases_B;
		/// <summary>Messages from uses of 'AllTraits_NCases__Rel_selector_cases'</summary>
		public Bernoulli[][][][] AllTraits_NCases__Rel_selector_cases_uses_B;
		/// <summary>True if Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1 has executed. Set this to false to force re-execution of Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1</summary>
		public bool Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone;
		/// <summary>True if Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7 has executed. Set this to false to force re-execution of Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7</summary>
		public bool Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone;
		/// <summary>True if Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7 has performed initialisation. Set this to false to force re-execution of Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7</summary>
		public bool Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised;
		/// <summary>True if Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11 has executed. Set this to false to force re-execution of Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11</summary>
		public bool Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone;
		/// <summary>True if Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11 has performed initialisation. Set this to false to force re-execution of Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11</summary>
		public bool Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isInitialised;
		/// <summary>True if Changed_AllEvents_EventsPriors_NumberOfCases has executed. Set this to false to force re-execution of Changed_AllEvents_EventsPriors_NumberOfCases</summary>
		public bool Changed_AllEvents_EventsPriors_NumberOfCases_isDone;
		/// <summary>True if Changed_AllEvents_NumberOfCases has executed. Set this to false to force re-execution of Changed_AllEvents_NumberOfCases</summary>
		public bool Changed_AllEvents_NumberOfCases_isDone;
		/// <summary>True if Changed_DialogueCPTPrior has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior</summary>
		public bool Changed_DialogueCPTPrior_isDone;
		/// <summary>True if Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6 has executed. Set this to false to force re-execution of Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6</summary>
		public bool Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isDone;
		/// <summary>True if Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6 has performed initialisation. Set this to false to force re-execution of Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6</summary>
		public bool Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised;
		/// <summary>True if Changed_EventsPriors has executed. Set this to false to force re-execution of Changed_EventsPriors</summary>
		public bool Changed_EventsPriors_isDone;
		/// <summary>True if Changed_NumberOfCases has executed. Set this to false to force re-execution of Changed_NumberOfCases</summary>
		public bool Changed_NumberOfCases_isDone;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3 has executed. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isDone;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3 has performed initialisation. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8 has executed. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8 has performed initialisation. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9 has executed. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone;
		/// <summary>True if Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9 has performed initialisation. Set this to false to force re-execution of Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9</summary>
		public bool Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised;
		/// <summary>True if Changed_NumberOfCases_vint__6 has executed. Set this to false to force re-execution of Changed_NumberOfCases_vint__6</summary>
		public bool Changed_NumberOfCases_vint__6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10</summary>
		public bool Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10</summary>
		public bool Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised;
		/// <summary>True if Changed_RelStatusPriors has executed. Set this to false to force re-execution of Changed_RelStatusPriors</summary>
		public bool Changed_RelStatusPriors_isDone;
		/// <summary>True if Changed_TraitsPriors has executed. Set this to false to force re-execution of Changed_TraitsPriors</summary>
		public bool Changed_TraitsPriors_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_F;
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_itemAllEvents_NCases__B;
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_itemAllEvents_NCases__F;
		/// <summary>Message to marginal of 'DialogueCPT'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_marginal_F;
		/// <summary>Message from use of 'DialogueCPT'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_use_B;
		/// <summary>Buffer for GetItemsOp&lt;Vector[][]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionRefArray&lt;DistributionRefArray&lt;Dirichlet, Vector&gt;, Vector[]&gt;, Vector[][]&gt;, DistributionRefArray&lt;DistributionRefArray&lt;Dirichlet, Vector&gt;, Vector[]&gt;&gt;</summary>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPT_use_F_marginal;
		/// <summary>Field backing the DialogueCPTPrior property</summary>
		private Dirichlet[][][] DialogueCPTPrior_field;
		/// <summary>Message to marginal of 'DialogueCPTPrior'</summary>
		public PointMass<Dirichlet[][][]> DialogueCPTPrior_marginal_F;
		/// <summary>Field backing the EventsPriors property</summary>
		private Dirichlet EventsPriors_field;
		/// <summary>Message to marginal of 'EventsPriors'</summary>
		public PointMass<Dirichlet> EventsPriors_marginal_F;
		/// <summary>Field backing the NumberOfCases property</summary>
		private int NumberOfCases_field;
		/// <summary>Message to marginal of 'NumberOfCases'</summary>
		public PointMass<int> NumberOfCases_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'PossibleEvents'</summary>
		public Dirichlet PossibleEvents_marginal_F;
		/// <summary>Message to marginal of 'PossibleRel'</summary>
		public Dirichlet PossibleRel_marginal_F;
		public Dirichlet[] PossibleRel_rep_F;
		/// <summary>Message to marginal of 'PossibleTraits'</summary>
		public Dirichlet PossibleTraits_marginal_F;
		public Dirichlet[] PossibleTraits_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Dirichlet&gt;</summary>
		public Dirichlet PossibleTraits_rep_B_toDef;
		/// <summary>Field backing the RelStatusPriors property</summary>
		private Dirichlet RelStatusPriors_field;
		/// <summary>Message to marginal of 'RelStatusPriors'</summary>
		public PointMass<Dirichlet> RelStatusPriors_marginal_F;
		/// <summary>Field backing the TraitsPriors property</summary>
		private Dirichlet TraitsPriors_field;
		/// <summary>Message to marginal of 'TraitsPriors'</summary>
		public PointMass<Dirichlet> TraitsPriors_marginal_F;
		/// <summary>Field backing the vint__6 property</summary>
		private int[] vint__6_field;
		/// <summary>Message to marginal of 'vint__6'</summary>
		public DistributionRefArray<Discrete,int> vint__6_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'AllEvents'</summary>
		public int[] AllEvents
		{
			get {
				return this.AllEvents_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumberOfCases)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumberOfCases)+" was expected for variable \'AllEvents\'");
				}
				this.AllEvents_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_AllEvents_NumberOfCases_isDone = false;
				this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
				this.Changed_AllEvents_EventsPriors_NumberOfCases_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DialogueCPTPrior'</summary>
		public Dirichlet[][][] DialogueCPTPrior
		{
			get {
				return this.DialogueCPTPrior_field;
			}
			set {
				if ((value!=null)&&(value.Length!=40)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+40)+" was expected for variable \'DialogueCPTPrior\'");
				}
				this.DialogueCPTPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = false;
				this.Changed_DialogueCPTPrior_isDone = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isDone = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPriors'</summary>
		public Dirichlet EventsPriors
		{
			get {
				return this.EventsPriors_field;
			}
			set {
				this.EventsPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_EventsPriors_isDone = false;
				this.Changed_AllEvents_EventsPriors_NumberOfCases_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'NumberOfCases'</summary>
		public int NumberOfCases
		{
			get {
				return this.NumberOfCases_field;
			}
			set {
				if (this.NumberOfCases_field!=value) {
					this.NumberOfCases_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_NumberOfCases_vint__6_isDone = false;
					this.Changed_AllEvents_NumberOfCases_isDone = false;
					this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = false;
					this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = false;
					this.Changed_NumberOfCases_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone = false;
					this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isDone = false;
					this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = false;
					this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
					this.Changed_AllEvents_EventsPriors_NumberOfCases_isDone = false;
				}
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'RelStatusPriors'</summary>
		public Dirichlet RelStatusPriors
		{
			get {
				return this.RelStatusPriors_field;
			}
			set {
				this.RelStatusPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_RelStatusPriors_isDone = false;
				this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'TraitsPriors'</summary>
		public Dirichlet TraitsPriors
		{
			get {
				return this.TraitsPriors_field;
			}
			set {
				this.TraitsPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_TraitsPriors_isDone = false;
				this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isDone = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__6'</summary>
		public int[] vint__6
		{
			get {
				return this.vint__6_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumberOfCases)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumberOfCases)+" was expected for variable \'vint__6\'");
				}
				this.vint__6_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_NumberOfCases_vint__6_isDone = false;
				this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = false;
				this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised = false;
				this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = false;
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'AllEvents' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllEventsMarginal()
		{
			return this.AllEvents_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'AllRels' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllRelsMarginal()
		{
			return this.AllRels_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'AllTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> AllTraitsMarginal()
		{
			return this.AllTraits_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of AllEvents and DialogueCPTPrior and NumberOfCases and numberOfIterations and RelStatusPriors and TraitsPriors and vint__6</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1(int numberOfIterations)
		{
			if (this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone) {
				return ;
			}
			this.PossibleTraits_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			Dirichlet PossibleTraits_rep_F_marginal;
			PossibleTraits_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(this.TraitsPriors);
			Dirichlet[] PossibleTraits_rep_F;
			// Create array for 'PossibleTraits_rep' Forwards messages.
			PossibleTraits_rep_F = new Dirichlet[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				PossibleTraits_rep_F[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			}
			DistributionRefArray<Discrete,int> AllTraits_F;
			// Create array for 'AllTraits' Forwards messages.
			AllTraits_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllTraits_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
			}
			// Create array for replicates of 'AllRels_NCases__selector_uses_B'
			Discrete[][] AllRels_NCases__selector_uses_B = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'AllRels_NCases__selector_uses' Backwards messages.
				AllRels_NCases__selector_uses_B[NCases] = new Discrete[3];
				AllRels_NCases__selector_uses_B[NCases][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
				AllRels_NCases__selector_uses_B[NCases][2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
				AllRels_NCases__selector_uses_B[NCases][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
			}
			// Create array for replicates of 'AllRels_NCases__selector_cases_uses_B'
			Bernoulli[][][] AllRels_NCases__selector_cases_uses_B = new Bernoulli[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'AllRels_NCases__selector_cases_uses' Backwards messages.
				AllRels_NCases__selector_cases_uses_B[NCases] = new Bernoulli[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllRels_NCases__selector_cases_uses' Backwards messages.
					AllRels_NCases__selector_cases_uses_B[NCases][Rel] = new Bernoulli[14];
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][13] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][12] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][11] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][10] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][9] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][8] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][7] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][4] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][3] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][2] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][1] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][0] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][5] = Bernoulli.Uniform();
					AllRels_NCases__selector_cases_uses_B[NCases][Rel][6] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B'
			Discrete[][][] AllTraits_NCases__Rel_selector_uses_B = new Discrete[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_B'
				AllTraits_NCases__Rel_selector_uses_B[NCases] = new Discrete[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllTraits_NCases__Rel_selector_uses' Backwards messages.
					AllTraits_NCases__Rel_selector_uses_B[NCases][Rel] = new Discrete[2];
					AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
					AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
				}
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F'
			Discrete[][][] AllTraits_NCases__Rel_selector_uses_F = new Discrete[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_uses_F'
				AllTraits_NCases__Rel_selector_uses_F[NCases] = new Discrete[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllTraits_NCases__Rel_selector_uses' Forwards messages.
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel] = new Discrete[2];
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
					AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
				}
			}
			Discrete AllRels_NCases__selector_rep_rep_B_reduced = default(Discrete);
			if (this.NumberOfCases>0) {
				AllRels_NCases__selector_rep_rep_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
			}
			// Create array for replicates of 'AllRels_NCases__selector_uses_F'
			Discrete[][] AllRels_NCases__selector_uses_F = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'AllRels_NCases__selector_uses' Forwards messages.
				AllRels_NCases__selector_uses_F[NCases] = new Discrete[3];
				AllRels_NCases__selector_uses_F[NCases][2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
				AllRels_NCases__selector_uses_F[NCases][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_B_toDef'
			Discrete[] AllRels_NCases__selector_rep_B_toDef = new Discrete[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllRels_NCases__selector_rep_B_toDef[NCases] = ReplicateOp_Divide.ToDefInit<Discrete>(AllRels_NCases__selector_uses_F[NCases][2]);
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_F_marginal'
			Discrete[] AllRels_NCases__selector_rep_F_marginal = new Discrete[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllRels_NCases__selector_rep_F_marginal[NCases] = ReplicateOp_Divide.MarginalInit<Discrete>(AllRels_NCases__selector_uses_F[NCases][2]);
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_F'
			Discrete[][] AllRels_NCases__selector_rep_F = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'AllRels_NCases__selector_rep' Forwards messages.
				AllRels_NCases__selector_rep_F[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllRels_NCases__selector_rep_F[NCases][Rel] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
				}
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_rep_B_toDef'
			Discrete[][] AllRels_NCases__selector_rep_rep_B_toDef = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllRels_NCases__selector_rep_rep_B_toDef'
				AllRels_NCases__selector_rep_rep_B_toDef[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllRels_NCases__selector_rep_rep_B_toDef[NCases][Rel] = ReplicateOp_Divide.ToDefInit<Discrete>(AllRels_NCases__selector_rep_F[NCases][Rel]);
				}
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_rep_F_marginal'
			Discrete[][] AllRels_NCases__selector_rep_rep_F_marginal = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllRels_NCases__selector_rep_rep_F_marginal'
				AllRels_NCases__selector_rep_rep_F_marginal[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllRels_NCases__selector_rep_rep_F_marginal[NCases][Rel] = ReplicateOp_Divide.MarginalInit<Discrete>(AllRels_NCases__selector_rep_F[NCases][Rel]);
				}
			}
			// Create array for replicates of 'AllRels_NCases__selector_rep_rep_F'
			Discrete[][][] AllRels_NCases__selector_rep_rep_F = new Discrete[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllRels_NCases__selector_rep_rep_F'
				AllRels_NCases__selector_rep_rep_F[NCases] = new Discrete[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllRels_NCases__selector_rep_rep' Forwards messages.
					AllRels_NCases__selector_rep_rep_F[NCases][Rel] = new Discrete[13];
					for(int Traits = 0; Traits<13; Traits++) {
						AllRels_NCases__selector_rep_rep_F[NCases][Rel][Traits] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
					}
				}
			}
			Discrete AllTraits_NCases__Rel_selector_rep_B_reduced = default(Discrete);
			if (this.NumberOfCases>0) {
				AllTraits_NCases__Rel_selector_rep_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_B_toDef'
			Discrete[][] AllTraits_NCases__Rel_selector_rep_B_toDef = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_B_toDef'
				AllTraits_NCases__Rel_selector_rep_B_toDef[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllTraits_NCases__Rel_selector_rep_B_toDef[NCases][Rel] = ReplicateOp_Divide.ToDefInit<Discrete>(AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1]);
				}
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_F_marginal'
			Discrete[][] AllTraits_NCases__Rel_selector_rep_F_marginal = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_F_marginal'
				AllTraits_NCases__Rel_selector_rep_F_marginal[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllTraits_NCases__Rel_selector_rep_F_marginal[NCases][Rel] = ReplicateOp_Divide.MarginalInit<Discrete>(AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1]);
				}
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_F'
			Discrete[][][] AllTraits_NCases__Rel_selector_rep_F = new Discrete[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_rep_F'
				AllTraits_NCases__Rel_selector_rep_F[NCases] = new Discrete[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllTraits_NCases__Rel_selector_rep' Forwards messages.
					AllTraits_NCases__Rel_selector_rep_F[NCases][Rel] = new Discrete[13];
					for(int Traits = 0; Traits<13; Traits++) {
						AllTraits_NCases__Rel_selector_rep_F[NCases][Rel][Traits] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
					}
				}
			}
			// Create array for replicates of 'DialogueCPT_AllEvents_NCases__Traits_Rel__B'
			Dirichlet[][][] DialogueCPT_AllEvents_NCases__Traits_Rel__B = new Dirichlet[this.NumberOfCases][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'DialogueCPT_AllEvents_NCases__Traits_Rel__B'
				DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases] = new Dirichlet[4][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for replicates of 'DialogueCPT_AllEvents_NCases__Traits_Rel__B'
					DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases][Rel] = new Dirichlet[13];
					for(int Traits = 0; Traits<13; Traits++) {
						DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases][Rel][Traits] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[this.AllEvents[NCases]][Traits][Rel]);
						// Message to 'DialogueCPT_AllEvents_NCases__Traits_Rel_' from Discrete factor
						DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases][Rel][Traits] = DiscreteFromDirichletOp.ProbsAverageConditional(this.vint__6[NCases], DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases][Rel][Traits]);
					}
				}
			}
			// Create array for replicates of 'DialogueCPT_AllEvents_NCases__Rel__B'
			DistributionRefArray<Dirichlet,Vector>[][] DialogueCPT_AllEvents_NCases__Rel__B = new DistributionRefArray<Dirichlet,Vector>[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'DialogueCPT_AllEvents_NCases__Rel__B'
				DialogueCPT_AllEvents_NCases__Rel__B[NCases] = new DistributionRefArray<Dirichlet,Vector>[4];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'DialogueCPT_AllEvents_NCases__Rel_' Backwards messages.
					DialogueCPT_AllEvents_NCases__Rel__B[NCases][Rel] = new DistributionRefArray<Dirichlet,Vector>(13);
					for(int Traits = 0; Traits<13; Traits++) {
						DialogueCPT_AllEvents_NCases__Rel__B[NCases][Rel][Traits] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[this.AllEvents[NCases]][Traits][Rel]);
					}
				}
			}
			// Create array for replicates of 'AllRels_NCases__selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] AllRels_NCases__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'AllRels_NCases__selector_cases' Backwards messages.
				AllRels_NCases__selector_cases_B[NCases] = new DistributionStructArray<Bernoulli,bool>(4);
				for(int Rel = 0; Rel<4; Rel++) {
					AllRels_NCases__selector_cases_B[NCases][Rel] = Bernoulli.Uniform();
				}
			}
			DistributionRefArray<Discrete,int> AllRels_F;
			// Create array for 'AllRels' Forwards messages.
			AllRels_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllRels_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
			}
			// Create array for replicates of 'AllRels_NCases__selector_uses_B_toDef'
			Discrete[] AllRels_NCases__selector_uses_B_toDef = new Discrete[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllRels_NCases__selector_uses_B_toDef[NCases] = ReplicateOp_Divide.ToDefInit<Discrete>(AllRels_F[NCases]);
			}
			Dirichlet[] PossibleRel_rep_B;
			// Create array for 'PossibleRel_rep' Backwards messages.
			PossibleRel_rep_B = new Dirichlet[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				PossibleRel_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			}
			Dirichlet PossibleRel_rep_B_toDef;
			PossibleRel_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(this.RelStatusPriors);
			Dirichlet PossibleRel_rep_F_marginal;
			PossibleRel_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Dirichlet>(this.RelStatusPriors);
			// Create array for replicates of 'AllRels_NCases__selector_uses_F_marginal'
			Discrete[] AllRels_NCases__selector_uses_F_marginal = new Discrete[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllRels_NCases__selector_uses_F_marginal[NCases] = ReplicateOp_Divide.MarginalInit<Discrete>(AllRels_F[NCases]);
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_B'
			Discrete[][] AllTraits_NCases__Rel_selector_B = new Discrete[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_B'
				AllTraits_NCases__Rel_selector_B[NCases] = new Discrete[4];
				for(int Rel = 0; Rel<4; Rel++) {
					AllTraits_NCases__Rel_selector_B[NCases][Rel] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
				}
			}
			DistributionRefArray<Discrete,int> AllTraits_use_B;
			// Create array for 'AllTraits_use' Backwards messages.
			AllTraits_use_B = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				AllTraits_use_B[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.DialogueCPT_use_F_marginal = GetItemsOp<Vector[][]>.Marginal<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>>(this.DialogueCPT_F, this.DialogueCPT_use_B, this.DialogueCPT_use_F_marginal);
				for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
					// Message to 'DialogueCPT_itemAllEvents_NCases_' from GetItems factor
					this.DialogueCPT_itemAllEvents_NCases__F[NCases] = GetItemsOp<Vector[][]>.ItemsAverageConditional<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>>(this.DialogueCPT_itemAllEvents_NCases__B[NCases], this.DialogueCPT_F, this.DialogueCPT_use_F_marginal, this.AllEvents, NCases, this.DialogueCPT_itemAllEvents_NCases__F[NCases]);
				}
				PossibleTraits_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(this.PossibleTraits_rep_B_toDef, this.TraitsPriors, PossibleTraits_rep_F_marginal);
				for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
					// Message to 'PossibleTraits_rep' from Replicate factor
					PossibleTraits_rep_F[NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(this.PossibleTraits_rep_B[NCases], PossibleTraits_rep_F_marginal, NCases, PossibleTraits_rep_F[NCases]);
					// Message to 'AllTraits' from Discrete factor
					AllTraits_F[NCases] = DiscreteFromDirichletOp.SampleAverageConditional(PossibleTraits_rep_F[NCases], AllTraits_F[NCases]);
					for(int Rel = 0; Rel<4; Rel++) {
						// Message to 'AllTraits_NCases__Rel_selector_uses' from Replicate factor
						AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0] = ReplicateOp_NoDivide.UsesAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_uses_B[NCases][Rel], AllTraits_F[NCases], 0, AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0]);
						// Message to 'AllRels_NCases__selector_cases_uses' from CasesInt factor
						AllRels_NCases__selector_cases_uses_B[NCases][Rel][6] = Bernoulli.FromLogOdds(IntCasesOp.LogEvidenceRatio(this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel], AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][0]));
						for(int Traits = 0; Traits<13; Traits++) {
							// Message to 'AllTraits_NCases__Rel_selector_cases_uses' from Discrete factor
							this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits][2] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.LogEvidenceRatio(this.vint__6[NCases], this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits][Rel]));
							// Message to 'AllTraits_NCases__Rel_selector_cases' from Replicate factor
							this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel][Traits] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits], this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel][Traits]);
						}
						// Message to 'AllTraits_NCases__Rel_selector_uses' from CasesInt factor
						AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][0] = IntCasesOp.IAverageConditional(this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel], AllTraits_NCases__Rel_selector_uses_B[NCases][Rel][0]);
						// Message to 'AllTraits_NCases__Rel_selector_uses' from Replicate factor
						AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1] = ReplicateOp_NoDivide.UsesAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_uses_B[NCases][Rel], AllTraits_F[NCases], 1, AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1]);
						// Message to 'AllRels_NCases__selector_cases_uses' from Replicate factor
						AllRels_NCases__selector_cases_uses_B[NCases][Rel][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Discrete>(AllTraits_NCases__Rel_selector_uses_B[NCases][Rel], AllTraits_F[NCases], AllTraits_NCases__Rel_selector_uses_F[NCases][Rel]));
						// Message to 'AllRels_NCases__selector_cases' from Replicate factor
						AllRels_NCases__selector_cases_B[NCases][Rel] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(AllRels_NCases__selector_cases_uses_B[NCases][Rel], AllRels_NCases__selector_cases_B[NCases][Rel]);
					}
					// Message to 'AllRels_NCases__selector_uses' from CasesInt factor
					AllRels_NCases__selector_uses_B[NCases][0] = IntCasesOp.IAverageConditional(AllRels_NCases__selector_cases_B[NCases], AllRels_NCases__selector_uses_B[NCases][0]);
					AllRels_NCases__selector_uses_B_toDef[NCases] = ReplicateOp_Divide.ToDef<Discrete>(AllRels_NCases__selector_uses_B[NCases], AllRels_NCases__selector_uses_B_toDef[NCases]);
					// Message to 'PossibleRel_rep' from Discrete factor
					PossibleRel_rep_B[NCases] = DiscreteFromDirichletOp.ProbsAverageConditional(AllRels_NCases__selector_uses_B_toDef[NCases], this.PossibleRel_rep_F[NCases], PossibleRel_rep_B[NCases]);
				}
				PossibleRel_rep_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(PossibleRel_rep_B, PossibleRel_rep_B_toDef);
				PossibleRel_rep_F_marginal = ReplicateOp_Divide.Marginal<Dirichlet>(PossibleRel_rep_B_toDef, this.RelStatusPriors, PossibleRel_rep_F_marginal);
				for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
					// Message to 'PossibleRel_rep' from Replicate factor
					this.PossibleRel_rep_F[NCases] = ReplicateOp_Divide.UsesAverageConditional<Dirichlet>(PossibleRel_rep_B[NCases], PossibleRel_rep_F_marginal, NCases, this.PossibleRel_rep_F[NCases]);
					// Message to 'AllRels' from Discrete factor
					AllRels_F[NCases] = DiscreteFromDirichletOp.SampleAverageConditional(this.PossibleRel_rep_F[NCases], AllRels_F[NCases]);
					for(int Rel = 0; Rel<4; Rel++) {
						// Message to 'AllTraits_NCases__Rel_selector' from Replicate factor
						AllTraits_NCases__Rel_selector_B[NCases][Rel] = ReplicateOp_NoDivide.DefAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_uses_B[NCases][Rel], AllTraits_NCases__Rel_selector_B[NCases][Rel]);
					}
					AllRels_NCases__selector_uses_F_marginal[NCases] = ReplicateOp_Divide.Marginal<Discrete>(AllRels_NCases__selector_uses_B_toDef[NCases], AllRels_F[NCases], AllRels_NCases__selector_uses_F_marginal[NCases]);
					// Message to 'AllRels_NCases__selector_uses' from Replicate factor
					AllRels_NCases__selector_uses_F[NCases][1] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllRels_NCases__selector_uses_B[NCases][1], AllRels_NCases__selector_uses_F_marginal[NCases], 1, AllRels_NCases__selector_uses_F[NCases][1]);
					// Message to 'AllTraits_use' from Enter factor
					AllTraits_use_B[NCases] = BeliefPropagationGateEnterOp.ValueAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_B[NCases], AllRels_NCases__selector_uses_F[NCases][1], AllTraits_F[NCases], AllTraits_use_B[NCases]);
					// Message to 'AllRels_NCases__selector_uses' from Replicate factor
					AllRels_NCases__selector_uses_F[NCases][2] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllRels_NCases__selector_rep_B_toDef[NCases], AllRels_NCases__selector_uses_F_marginal[NCases], 2, AllRels_NCases__selector_uses_F[NCases][2]);
					AllRels_NCases__selector_rep_F_marginal[NCases] = ReplicateOp_Divide.Marginal<Discrete>(AllRels_NCases__selector_rep_B_toDef[NCases], AllRels_NCases__selector_uses_F[NCases][2], AllRels_NCases__selector_rep_F_marginal[NCases]);
					for(int Rel = 0; Rel<4; Rel++) {
						AllTraits_NCases__Rel_selector_rep_F_marginal[NCases][Rel] = ReplicateOp_Divide.Marginal<Discrete>(AllTraits_NCases__Rel_selector_rep_B_toDef[NCases][Rel], AllTraits_NCases__Rel_selector_uses_F[NCases][Rel][1], AllTraits_NCases__Rel_selector_rep_F_marginal[NCases][Rel]);
						// Message to 'AllRels_NCases__selector_rep' from Replicate factor
						AllRels_NCases__selector_rep_F[NCases][Rel] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllRels_NCases__selector_rep_rep_B_toDef[NCases][Rel], AllRels_NCases__selector_rep_F_marginal[NCases], Rel, AllRels_NCases__selector_rep_F[NCases][Rel]);
						AllRels_NCases__selector_rep_rep_F_marginal[NCases][Rel] = ReplicateOp_Divide.Marginal<Discrete>(AllRels_NCases__selector_rep_rep_B_toDef[NCases][Rel], AllRels_NCases__selector_rep_F[NCases][Rel], AllRels_NCases__selector_rep_rep_F_marginal[NCases][Rel]);
						for(int Traits = 0; Traits<13; Traits++) {
							// Message to 'AllTraits_NCases__Rel_selector_rep' from Replicate factor
							AllTraits_NCases__Rel_selector_rep_F[NCases][Rel][Traits] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllTraits_NCases__Rel_selector_rep_B_reduced, AllTraits_NCases__Rel_selector_rep_F_marginal[NCases][Rel], Traits, AllTraits_NCases__Rel_selector_rep_F[NCases][Rel][Traits]);
							// Message to 'DialogueCPT_AllEvents_NCases__Rel_' from EnterOne factor
							DialogueCPT_AllEvents_NCases__Rel__B[NCases][Rel][Traits] = GateEnterOneOp<Vector>.ValueAverageConditional<Dirichlet>(DialogueCPT_AllEvents_NCases__Traits_Rel__B[NCases][Rel][Traits], AllTraits_NCases__Rel_selector_rep_F[NCases][Rel][Traits], this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits][Rel], Traits, DialogueCPT_AllEvents_NCases__Rel__B[NCases][Rel][Traits]);
							// Message to 'AllRels_NCases__selector_rep_rep' from Replicate factor
							AllRels_NCases__selector_rep_rep_F[NCases][Rel][Traits] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(AllRels_NCases__selector_rep_rep_B_reduced, AllRels_NCases__selector_rep_rep_F_marginal[NCases][Rel], Traits, AllRels_NCases__selector_rep_rep_F[NCases][Rel][Traits]);
							// Message to 'DialogueCPT_itemAllEvents_NCases_' from EnterOne factor
							this.DialogueCPT_itemAllEvents_NCases__B[NCases][Traits][Rel] = GateEnterOneOp<Vector>.ValueAverageConditional<Dirichlet>(DialogueCPT_AllEvents_NCases__Rel__B[NCases][Rel][Traits], AllRels_NCases__selector_rep_rep_F[NCases][Rel][Traits], this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits][Rel], Rel, this.DialogueCPT_itemAllEvents_NCases__B[NCases][Traits][Rel]);
						}
					}
					// Message to 'PossibleTraits_rep' from Discrete factor
					this.PossibleTraits_rep_B[NCases] = DiscreteFromDirichletOp.ProbsAverageConditional(AllTraits_use_B[NCases], PossibleTraits_rep_F[NCases], this.PossibleTraits_rep_B[NCases]);
				}
				this.PossibleTraits_rep_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(this.PossibleTraits_rep_B, this.PossibleTraits_rep_B_toDef);
				// Message to 'DialogueCPT_use' from GetItems factor
				this.DialogueCPT_use_B = GetItemsOp<Vector[][]>.ArrayAverageConditional<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>>(this.DialogueCPT_itemAllEvents_NCases__B, this.AllEvents, this.DialogueCPT_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'PossibleTraits_marginal' from Variable factor
			this.PossibleTraits_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(this.PossibleTraits_rep_B_toDef, this.TraitsPriors, this.PossibleTraits_marginal_F);
			this.PossibleRel_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			// Message to 'PossibleRel_marginal' from Variable factor
			this.PossibleRel_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(PossibleRel_rep_B_toDef, this.RelStatusPriors, this.PossibleRel_marginal_F);
			// Create array for 'DialogueCPT_marginal' Forwards messages.
			this.DialogueCPT_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(40);
			for(int Events = 0; Events<40; Events++) {
				// Create array for 'DialogueCPT_marginal' Forwards messages.
				this.DialogueCPT_marginal_F[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(13);
			}
			for(int Traits = 0; Traits<13; Traits++) {
				for(int Events = 0; Events<40; Events++) {
					// Create array for 'DialogueCPT_marginal' Forwards messages.
					this.DialogueCPT_marginal_F[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(4);
				}
			}
			for(int Rel = 0; Rel<4; Rel++) {
				for(int Traits = 0; Traits<13; Traits++) {
					for(int Events = 0; Events<40; Events++) {
						this.DialogueCPT_marginal_F[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
						// Message to 'DialogueCPT_marginal' from Variable factor
						this.DialogueCPT_marginal_F[Events][Traits][Rel] = VariableOp.MarginalAverageConditional<Dirichlet>(this.DialogueCPT_use_B[Events][Traits][Rel], this.DialogueCPTPrior[Events][Traits][Rel], this.DialogueCPT_marginal_F[Events][Traits][Rel]);
					}
				}
			}
			// Create array for 'AllTraits_marginal' Forwards messages.
			this.AllTraits_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.AllTraits_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(13));
				// Message to 'AllTraits_marginal' from Variable factor
				this.AllTraits_marginal_F[NCases] = VariableOp.MarginalAverageConditional<Discrete>(AllTraits_use_B[NCases], AllTraits_F[NCases], this.AllTraits_marginal_F[NCases]);
			}
			// Create array for 'AllRels_marginal' Forwards messages.
			this.AllRels_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.AllRels_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(4));
				// Message to 'AllRels_marginal' from Variable factor
				this.AllRels_marginal_F[NCases] = VariableOp.MarginalAverageConditional<Discrete>(AllRels_NCases__selector_uses_B_toDef[NCases], AllRels_F[NCases], this.AllRels_marginal_F[NCases]);
			}
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of AllEvents and DialogueCPTPrior and NumberOfCases and numberOfIterationsDecreased and must reset on changes to RelStatusPriors and TraitsPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7(bool initialise)
		{
			if (this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone&&((!initialise)||this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				for(int Rel = 0; Rel<4; Rel++) {
					for(int Traits = 0; Traits<13; Traits++) {
						this.DialogueCPT_itemAllEvents_NCases__B[NCases][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[this.AllEvents[NCases]][Traits][Rel]);
						this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[this.AllEvents[NCases]][Traits][Rel]);
					}
				}
				// Message to 'DialogueCPT_itemAllEvents_NCases_' from GetItems factor
				this.DialogueCPT_itemAllEvents_NCases__F[NCases] = GetItemsOp<Vector[][]>.ItemsAverageConditional<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>>(this.DialogueCPT_itemAllEvents_NCases__B[NCases], this.DialogueCPT_F, this.DialogueCPT_use_F_marginal, this.AllEvents, NCases, this.DialogueCPT_itemAllEvents_NCases__F[NCases]);
			}
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone = true;
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of AllEvents and DialogueCPTPrior and NumberOfCases and numberOfIterationsDecreased and vint__6 and must reset on changes to RelStatusPriors and TraitsPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11(bool initialise)
		{
			if (this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone&&((!initialise)||this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				for(int Rel = 0; Rel<4; Rel++) {
					for(int Traits = 0; Traits<13; Traits++) {
						// Message to 'AllTraits_NCases__Rel_selector_cases_uses' from Discrete factor
						this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits][2] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.LogEvidenceRatio(this.vint__6[NCases], this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits][Rel]));
						// Message to 'AllTraits_NCases__Rel_selector_cases' from Replicate factor
						this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel][Traits] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits], this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel][Traits]);
					}
				}
			}
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = true;
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of AllEvents and EventsPriors and NumberOfCases</summary>
		private void Changed_AllEvents_EventsPriors_NumberOfCases()
		{
			if (this.Changed_AllEvents_EventsPriors_NumberOfCases_isDone) {
				return ;
			}
			this.PossibleEvents_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
			Dirichlet[] PossibleEvents_rep_B;
			// Create array for 'PossibleEvents_rep' Backwards messages.
			PossibleEvents_rep_B = new Dirichlet[this.NumberOfCases];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				PossibleEvents_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.EventsPriors);
				// Message to 'PossibleEvents_rep' from Discrete factor
				PossibleEvents_rep_B[NCases] = DiscreteFromDirichletOp.ProbsAverageConditional(this.AllEvents[NCases], PossibleEvents_rep_B[NCases]);
			}
			Dirichlet PossibleEvents_rep_B_toDef;
			PossibleEvents_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(this.EventsPriors);
			PossibleEvents_rep_B_toDef = ReplicateOp_Divide.ToDef<Dirichlet>(PossibleEvents_rep_B, PossibleEvents_rep_B_toDef);
			// Message to 'PossibleEvents_marginal' from Variable factor
			this.PossibleEvents_marginal_F = VariableOp.MarginalAverageConditional<Dirichlet>(PossibleEvents_rep_B_toDef, this.EventsPriors, this.PossibleEvents_marginal_F);
			this.Changed_AllEvents_EventsPriors_NumberOfCases_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of AllEvents and NumberOfCases</summary>
		private void Changed_AllEvents_NumberOfCases()
		{
			if (this.Changed_AllEvents_NumberOfCases_isDone) {
				return ;
			}
			// Create array for 'AllEvents_marginal' Forwards messages.
			this.AllEvents_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.AllEvents_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(40));
			}
			// Message to 'AllEvents_marginal' from DerivedVariable factor
			this.AllEvents_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<Discrete,int>,int[]>(this.AllEvents, this.AllEvents_marginal_F);
			this.Changed_AllEvents_NumberOfCases_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior</summary>
		private void Changed_DialogueCPTPrior()
		{
			if (this.Changed_DialogueCPTPrior_isDone) {
				return ;
			}
			for(int Rel = 0; Rel<4; Rel++) {
				for(int Traits = 0; Traits<13; Traits++) {
					for(int Events = 0; Events<40; Events++) {
						this.DialogueCPT_F[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
						// Message to 'DialogueCPT' from Random factor
						this.DialogueCPT_F[Events][Traits][Rel] = ArrayHelper.SetTo<Dirichlet>(this.DialogueCPT_F[Events][Traits][Rel], this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			// Create array for 'DialogueCPTPrior_marginal' Forwards messages.
			this.DialogueCPTPrior_marginal_F = new PointMass<Dirichlet[][][]>(this.DialogueCPTPrior);
			// Message to 'DialogueCPTPrior_marginal' from DerivedVariable factor
			this.DialogueCPTPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet[][][]>,Dirichlet[][][]>(this.DialogueCPTPrior, this.DialogueCPTPrior_marginal_F);
			this.Changed_DialogueCPTPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DialogueCPTPrior and numberOfIterationsDecreased and must reset on changes to AllEvents and NumberOfCases and RelStatusPriors and TraitsPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6(bool initialise)
		{
			if (this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isDone&&((!initialise)||this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised)) {
				return ;
			}
			this.DialogueCPT_use_F_marginal = GetItemsOp<Vector[][]>.MarginalInit<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>>(this.DialogueCPT_F);
			for(int Rel = 0; Rel<4; Rel++) {
				for(int Traits = 0; Traits<13; Traits++) {
					for(int Events = 0; Events<40; Events++) {
						this.DialogueCPT_use_B[Events][Traits][Rel] = ArrayHelper.MakeUniform<Dirichlet>(this.DialogueCPTPrior[Events][Traits][Rel]);
					}
				}
			}
			this.DialogueCPT_use_F_marginal = GetItemsOp<Vector[][]>.Marginal<DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>,DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>>(this.DialogueCPT_F, this.DialogueCPT_use_B, this.DialogueCPT_use_F_marginal);
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isDone = true;
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPriors</summary>
		private void Changed_EventsPriors()
		{
			if (this.Changed_EventsPriors_isDone) {
				return ;
			}
			this.EventsPriors_marginal_F = new PointMass<Dirichlet>(this.EventsPriors);
			// Message to 'EventsPriors_marginal' from DerivedVariable factor
			this.EventsPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.EventsPriors, this.EventsPriors_marginal_F);
			this.Changed_EventsPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases</summary>
		private void Changed_NumberOfCases()
		{
			if (this.Changed_NumberOfCases_isDone) {
				return ;
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_B'
			this.AllTraits_NCases__Rel_selector_cases_uses_B = new Bernoulli[this.NumberOfCases][][][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_uses_B'
				this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases] = new Bernoulli[4][][];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Backwards messages.
					this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel] = new Bernoulli[13][];
					for(int Traits = 0; Traits<13; Traits++) {
						// Create array for 'AllTraits_NCases__Rel_selector_cases_uses' Backwards messages.
						this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits] = new Bernoulli[3];
						this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits][1] = Bernoulli.Uniform();
						this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits][0] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for 'DialogueCPT_itemAllEvents_NCases_' Backwards messages.
			this.DialogueCPT_itemAllEvents_NCases__B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'DialogueCPT_itemAllEvents_NCases_' Backwards messages.
				this.DialogueCPT_itemAllEvents_NCases__B[NCases] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(13);
				for(int Traits = 0; Traits<13; Traits++) {
					// Create array for 'DialogueCPT_itemAllEvents_NCases_' Backwards messages.
					this.DialogueCPT_itemAllEvents_NCases__B[NCases][Traits] = new DistributionRefArray<Dirichlet,Vector>(4);
				}
			}
			// Create array for 'DialogueCPT_itemAllEvents_NCases_' Forwards messages.
			this.DialogueCPT_itemAllEvents_NCases__F = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for 'DialogueCPT_itemAllEvents_NCases_' Forwards messages.
				this.DialogueCPT_itemAllEvents_NCases__F[NCases] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(13);
				for(int Traits = 0; Traits<13; Traits++) {
					// Create array for 'DialogueCPT_itemAllEvents_NCases_' Forwards messages.
					this.DialogueCPT_itemAllEvents_NCases__F[NCases][Traits] = new DistributionRefArray<Dirichlet,Vector>(4);
				}
			}
			// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_B'
			this.AllTraits_NCases__Rel_selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.NumberOfCases][];
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				// Create array for replicates of 'AllTraits_NCases__Rel_selector_cases_B'
				this.AllTraits_NCases__Rel_selector_cases_B[NCases] = new DistributionStructArray<Bernoulli,bool>[4];
				for(int Rel = 0; Rel<4; Rel++) {
					// Create array for 'AllTraits_NCases__Rel_selector_cases' Backwards messages.
					this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel] = new DistributionStructArray<Bernoulli,bool>(13);
				}
			}
			// Create array for 'PossibleRel_rep' Forwards messages.
			this.PossibleRel_rep_F = new Dirichlet[this.NumberOfCases];
			// Create array for 'PossibleTraits_rep' Backwards messages.
			this.PossibleTraits_rep_B = new Dirichlet[this.NumberOfCases];
			this.NumberOfCases_marginal_F = new PointMass<int>(this.NumberOfCases);
			// Message to 'NumberOfCases_marginal' from DerivedVariable factor
			this.NumberOfCases_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.NumberOfCases, this.NumberOfCases_marginal_F);
			this.Changed_NumberOfCases_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases and numberOfIterationsDecreased and must reset on changes to AllEvents and DialogueCPTPrior and RelStatusPriors and TraitsPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3(bool initialise)
		{
			if (this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isDone&&((!initialise)||this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				for(int Rel = 0; Rel<4; Rel++) {
					for(int Traits = 0; Traits<13; Traits++) {
						this.AllTraits_NCases__Rel_selector_cases_uses_B[NCases][Rel][Traits][2] = Bernoulli.Uniform();
						this.AllTraits_NCases__Rel_selector_cases_B[NCases][Rel][Traits] = Bernoulli.Uniform();
					}
				}
			}
			this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isDone = true;
			this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases and numberOfIterationsDecreased and RelStatusPriors and must reset on changes to AllEvents and DialogueCPTPrior and TraitsPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8(bool initialise)
		{
			if (this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone&&((!initialise)||this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.PossibleRel_rep_F[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.RelStatusPriors);
			}
			this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone = true;
			this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases and numberOfIterationsDecreased and TraitsPriors and must reset on changes to AllEvents and DialogueCPTPrior and RelStatusPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9(bool initialise)
		{
			if (this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone&&((!initialise)||this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised)) {
				return ;
			}
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.PossibleTraits_rep_B[NCases] = ArrayHelper.MakeUniform<Dirichlet>(this.TraitsPriors);
			}
			this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone = true;
			this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of NumberOfCases and vint__6</summary>
		private void Changed_NumberOfCases_vint__6()
		{
			if (this.Changed_NumberOfCases_vint__6_isDone) {
				return ;
			}
			// Create array for 'vint__6_marginal' Forwards messages.
			this.vint__6_marginal_F = new DistributionRefArray<Discrete,int>(this.NumberOfCases);
			for(int NCases = 0; NCases<this.NumberOfCases; NCases++) {
				this.vint__6_marginal_F[NCases] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(646));
			}
			// Message to 'vint__6_marginal' from DerivedVariable factor
			this.vint__6_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<Discrete,int>,int[]>(this.vint__6, this.vint__6_marginal_F);
			this.Changed_NumberOfCases_vint__6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and TraitsPriors and must reset on changes to AllEvents and DialogueCPTPrior and NumberOfCases and RelStatusPriors and vint__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised)) {
				return ;
			}
			this.PossibleTraits_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Dirichlet>(this.TraitsPriors);
			this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isDone = true;
			this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of RelStatusPriors</summary>
		private void Changed_RelStatusPriors()
		{
			if (this.Changed_RelStatusPriors_isDone) {
				return ;
			}
			this.RelStatusPriors_marginal_F = new PointMass<Dirichlet>(this.RelStatusPriors);
			// Message to 'RelStatusPriors_marginal' from DerivedVariable factor
			this.RelStatusPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.RelStatusPriors, this.RelStatusPriors_marginal_F);
			this.Changed_RelStatusPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of TraitsPriors</summary>
		private void Changed_TraitsPriors()
		{
			if (this.Changed_TraitsPriors_isDone) {
				return ;
			}
			this.TraitsPriors_marginal_F = new PointMass<Dirichlet>(this.TraitsPriors);
			// Message to 'TraitsPriors_marginal' from DerivedVariable factor
			this.TraitsPriors_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Dirichlet>,Dirichlet>(this.TraitsPriors, this.TraitsPriors_marginal_F);
			this.Changed_TraitsPriors_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'DialogueCPT' Forwards messages.
			this.DialogueCPT_F = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(40);
			for(int Events = 0; Events<40; Events++) {
				// Create array for 'DialogueCPT' Forwards messages.
				this.DialogueCPT_F[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(13);
			}
			for(int Traits = 0; Traits<13; Traits++) {
				for(int Events = 0; Events<40; Events++) {
					// Create array for 'DialogueCPT' Forwards messages.
					this.DialogueCPT_F[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(4);
				}
			}
			// Create array for 'DialogueCPT_use' Backwards messages.
			this.DialogueCPT_use_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(40);
			for(int Events = 0; Events<40; Events++) {
				// Create array for 'DialogueCPT_use' Backwards messages.
				this.DialogueCPT_use_B[Events] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(13);
			}
			for(int Traits = 0; Traits<13; Traits++) {
				for(int Events = 0; Events<40; Events++) {
					// Create array for 'DialogueCPT_use' Backwards messages.
					this.DialogueCPT_use_B[Events][Traits] = new DistributionRefArray<Dirichlet,Vector>(4);
				}
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueCPT' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> DialogueCPTMarginal()
		{
			return this.DialogueCPT_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DialogueCPTPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet[][][]> DialogueCPTPriorMarginal()
		{
			return this.DialogueCPTPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> EventsPriorsMarginal()
		{
			return this.EventsPriors_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10_isDone = false;
					this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8_isDone = false;
					this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7_isDone = false;
					this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3_isDone = false;
					this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11_isDone = false;
				}
				this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1_isDone = false;
			}
			this.Changed_NumberOfCases_vint__6();
			this.Changed_AllEvents_NumberOfCases();
			this.Changed_RelStatusPriors();
			this.Changed_TraitsPriors();
			this.Changed_EventsPriors();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_NumberOfCases_RelSt10(initialise);
			this.Changed_DialogueCPTPrior();
			this.Changed_DialogueCPTPrior_numberOfIterationsDecreased_Init_AllEvents_NumberOfCases_RelStatusPriors_Tr6(initialise);
			this.Changed_NumberOfCases();
			this.Changed_NumberOfCases_numberOfIterationsDecreased_TraitsPriors_Init_AllEvents_DialogueCPTPrior_RelSt9(initialise);
			this.Changed_NumberOfCases_numberOfIterationsDecreased_RelStatusPriors_Init_AllEvents_DialogueCPTPrior_Tr8(initialise);
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_Init_RelStatusPriors_Tr7(initialise);
			this.Changed_NumberOfCases_numberOfIterationsDecreased_Init_AllEvents_DialogueCPTPrior_RelStatusPriors_Tr3(initialise);
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterationsDecreased_vint__6_Init_RelStatusP11(initialise);
			this.Changed_AllEvents_DialogueCPTPrior_NumberOfCases_numberOfIterations_RelStatusPriors_TraitsPriors_vin1(numberOfIterations);
			this.Changed_AllEvents_EventsPriors_NumberOfCases();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="NumberOfCases") {
				return this.NumberOfCases;
			}
			if (variableName=="EventsPriors") {
				return this.EventsPriors;
			}
			if (variableName=="TraitsPriors") {
				return this.TraitsPriors;
			}
			if (variableName=="RelStatusPriors") {
				return this.RelStatusPriors;
			}
			if (variableName=="DialogueCPTPrior") {
				return this.DialogueCPTPrior;
			}
			if (variableName=="AllEvents") {
				return this.AllEvents;
			}
			if (variableName=="vint__6") {
				return this.vint__6;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vint__6") {
				return this.Vint__6Marginal();
			}
			if (variableName=="AllEvents") {
				return this.AllEventsMarginal();
			}
			if (variableName=="RelStatusPriors") {
				return this.RelStatusPriorsMarginal();
			}
			if (variableName=="TraitsPriors") {
				return this.TraitsPriorsMarginal();
			}
			if (variableName=="EventsPriors") {
				return this.EventsPriorsMarginal();
			}
			if (variableName=="DialogueCPTPrior") {
				return this.DialogueCPTPriorMarginal();
			}
			if (variableName=="NumberOfCases") {
				return this.NumberOfCasesMarginal();
			}
			if (variableName=="PossibleTraits") {
				return this.PossibleTraitsMarginal();
			}
			if (variableName=="PossibleRel") {
				return this.PossibleRelMarginal();
			}
			if (variableName=="DialogueCPT") {
				return this.DialogueCPTMarginal();
			}
			if (variableName=="AllTraits") {
				return this.AllTraitsMarginal();
			}
			if (variableName=="AllRels") {
				return this.AllRelsMarginal();
			}
			if (variableName=="PossibleEvents") {
				return this.PossibleEventsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'NumberOfCases' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NumberOfCasesMarginal()
		{
			return this.NumberOfCases_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleEvents' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleEventsMarginal()
		{
			return this.PossibleEvents_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleRel' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleRelMarginal()
		{
			return this.PossibleRel_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PossibleTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet PossibleTraitsMarginal()
		{
			return this.PossibleTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'RelStatusPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> RelStatusPriorsMarginal()
		{
			return this.RelStatusPriors_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="NumberOfCases") {
				this.NumberOfCases = (int)value;
				return ;
			}
			if (variableName=="EventsPriors") {
				this.EventsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="TraitsPriors") {
				this.TraitsPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="RelStatusPriors") {
				this.RelStatusPriors = (Dirichlet)value;
				return ;
			}
			if (variableName=="DialogueCPTPrior") {
				this.DialogueCPTPrior = (Dirichlet[][][])value;
				return ;
			}
			if (variableName=="AllEvents") {
				this.AllEvents = (int[])value;
				return ;
			}
			if (variableName=="vint__6") {
				this.vint__6 = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'TraitsPriors' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Dirichlet> TraitsPriorsMarginal()
		{
			return this.TraitsPriors_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__6Marginal()
		{
			return this.vint__6_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
